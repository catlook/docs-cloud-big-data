<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">

<!-- Useful for describing APIs -->
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
<!ENTITY PRODNAME "Cloud Big Data">
<!ENTITY PRODABBV "CBD">

<!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
<!ENTITY ENDPOINT-US "https://auth.api.rackspacecloud.com/v2.0/">
<!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">

<!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
<imagedata fileref="img/Check_mark_23x20_02.svg"
format="SVG" scale="60"/>
</imageobject>
</inlinemediaobject>'>

<!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
<imagedata fileref="img/Arrow_east.svg"
format="SVG" scale="60"/>
</imageobject>
</inlinemediaobject>'>
]>
<book 
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:wadl="http://wadl.dev.java.net/2009/02"
    version="5.0-extension RackBook-2.0" 
    xml:id="cbd-devguide">
  <title>&PRODNAME; Developer Guide</title>
    <?rax title.font.size="30px" 
      pdf.url="../../cbd-devguide-latest.pdf" 
      status.bar.text.font.size="40px"
      status.bar.text="Preview" 
      scanonical.url.base="http://docs.rackspace.com/servers/api/v2/cbd-devguide/content"?>
  <titleabbrev>&PRODNAME; Developer Guide</titleabbrev> 
  <info>
    <author>
      <personname>
        <firstname/>
        <surname/>
      </personname>
      <affiliation>
        <orgname>Rackspace Cloud</orgname>
      </affiliation>
    </author>
    <copyright>
      <year>2012</year>
      <year>2013</year>
    </copyright>
    <releaseinfo>API v1.0 Preview</releaseinfo>
    <productname>&PRODNAME;</productname>
    <pubdate/>
    <legalnotice role="rs-api">
      <annotation xmlns:svg="http://www.w3.org/2000/svg"
        xmlns:m="http://www.w3.org/1998/Math/MathML"
        xmlns:html="http://www.w3.org/1999/xhtml">
        <remark>Copyright details are filled in by the
          template.</remark>
      </annotation>
    </legalnotice>
    <abstract>
      <para>This document is intended for software developers
        interested in developing applications using the
        Rackspace &PRODNAME; Application Programming
        Interface (<abbrev>API</abbrev>). </para>
    </abstract>
    <revhistory xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml">
      <revision>
        <date>2013-02-07</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Initial Preview release.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
    </revhistory>
  </info>
  <preface xml:id="overview" xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Overview</title>
    <para>Rackspace &PRODNAME; (&PRODABBV;) is an on-demand Hadoop 
      service on the Rackspace open cloud. It alleviates the pain 
      associated with deploying, managing, and scaling Hadoop
      clusters, allowing you to focus on your core business.
    </para>
    <para>
      There are two primary use cases for &PRODNAME;: (1) To create
      on-demand infrastructure for applications in production where physical
      servers would be too costly and time-consuming to configure and maintain
      and (2) To develop, test, and pilot data analysis applications.
    </para>
    <para>
      Among the benefits of &PRODNAME;, it allows you to:
      <itemizedlist>      
      <listitem>
        <para>Create or resize Hadoop clusters in minutes and pay only for what you use.</para>
      </listitem>
        <listitem>
          <para>Access Hortonworks Data Platform (HDP), an enterprise-ready distribution that is
          100% Apache open source.</para>
        </listitem>
        <listitem>          
          <para>Provision and manage Hadoop using an easy-to-use Control Panel and a RESTful API.</para>
        </listitem>
        <listitem>          
          <para>Seamlessly access data in Cloud Files containers.</para>
        </listitem>
        <listitem>
          <para>Gain interoperability with any third party software tool that supports HDP.</para>
        </listitem>
        <listitem>
          <para>Fanatical Support® on a 24x7x365 basis via chat, phone or ticket.</para>
        </listitem>
      </itemizedlist>
    </para>
    <para>Interactions with &PRODABBV; occur programmatically via the
      API, as described in this developer guide.
    </para>
    <para>The Preview program enables customers and Rackers by invitation to test
      an early version of the product and provide feedback of the
      product and capabilities. The &PRODABBV; Preview Program is a
      pre-production service offering covered by the Beta Services
      terms (<link
        xlink:href="http://www.rackspace.com/information/legal/testterms/">
        rackspace.com/information/legal/testterms/</link>) in
        our Rackspace Cloud Terms of Service.</para>
    <para>
      Preview users must meet the following criteria:
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            A Rackspace Cloud account.</para>
        </listitem>
        <listitem>
          <para>Prior knowledge of Hadoop or a 3rd party tool that works with Hadoop.</para>
        </listitem>
        <listitem>          
          <para>Ability to work with the Hortonworks Data Platform.</para>
        </listitem>
        <listitem>          
          <para>Basic familiarity with Cloud and RESTful APIs.</para>
        </listitem>
        <listitem>
          <para>A willingness to provide feedback to Rackspace’s Product and Product
    Marketing functions.</para>
        </listitem>
          </itemizedlist>
    </para>

<para>
  The following is supported during the Preview Program:
  <itemizedlist spacing="compact">
    <listitem>
      <para>
        Operating System – CentOS 6.3.       
      </para>
    </listitem>
    <listitem>
      <para>    Hadoop Distribution – Hortonworks Data Platform (HDP) version 1.1.
      </para>
    </listitem>    
  </itemizedlist>
</para>


    <para>The Preview Program has some limitations. By using the &PRODNAME; 
      API, you agree and understand that:<itemizedlist spacing="compact">
        <listitem>
          <para>&PRODABBV; includes a Swift integration feature wherein Hadoop, 
            MapReduce, or Pig jobs can directly reference Cloud Files 
            containers. Currently, it is only possible to reference 
            containers in DFW.</para>
        </listitem>
        <listitem>
          <para>There is no charge for this service during the Preview
            period.</para>
        </listitem>
        <listitem>
          <para>We will charge for &PRODNAME; when
            this service becomes generally available.</para>
        </listitem>
        <listitem>
          <para>If you participate in this Preview Program, you will
            receive a notification prior to general availability.
          </para>
        </listitem>
        <listitem>
          <para>There is no Service Level Agreement. </para>
        </listitem>
        <listitem>
          <para>Support is available from 8 AM – 5 PM (Central Time)
            Monday–Friday.</para>
        </listitem>
      </itemizedlist>
    </para>
    <para>There are some resource limits during the Preview Program:
      <itemizedlist spacing="compact">
        <listitem>
          <para>
           Up to 5 data nodes</para></listitem>
        <listitem>
          <para>Up to 5 virtual CPUs</para></listitem>
        <listitem>
          <para>Up to 25 GBs of RAM</para></listitem>
        <listitem>
          <para>Up to 2 Terabytes of disk space</para></listitem>
      </itemizedlist>
    </para>

    <section xml:id="Intended_Audience-d1e122">
      <title>Intended Audience</title>
      <para> This Guide is intended to assist software developers who
        want to develop applications using the &PRODNAME;
        API. It assumes the reader has a general understanding of
        Big Data concepts and is familiar with: </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>Hadoop, HDFS, and MapReduce</para>
        </listitem>
        <listitem>
          <para>ReSTful web services</para>
        </listitem>
        <listitem>
          <para>HTTP/1.1 conventions</para>
        </listitem>
        <listitem>
          <para>JSON serialization formats</para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="Document_Change_History-d1e166">
      <title>Document Change History</title>
      <para>This version of the Developer Guide replaces and obsoletes
        all previous versions. The most recent changes are described
        in the table below:</para>
      <?rax revhistory?>
    </section>
    <section xml:id="Additional_Resources-d1e532">
      <title>Additional Resources</title>
<!--
      <para>You can download the most current versions of the
        API-related documents from <link
          xlink:href="http://docs.rackspace.com/api/"
          >docs.rackspace.com/api/</link>. 
      </para>
      -->
      <para>
        For information about Rackspace Cloud products, refer to
          <link xlink:href="http://www.rackspace.com/cloud/">
            www.rackspace.com/cloud</link>. This site also
        offers links to Rackspace's official support channels,
        including knowledge base articles, forums, phone, chat, and
        email. </para>
      <para>Email all support questions to:
        <email>cbdteam@rackspace.com</email>. 
      </para>
      <para>You can follow Rackspace updates and announcements
        via twitter at: <link
          xlink:href="http://www.twitter.com/rackspace"
          >www.twitter.com/rackspace</link>. </para>
      <para>This API uses standard HTTP 1.1 response codes as
        documented at: <link
          xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
          >www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>.
      </para>
    </section>
    <section xml:id="API_Contract_Changes-d1e363">
      <title>API Contract Changes</title>
      <para>The API contract is not locked and may change during the
        Preview Program.</para>
      <para>Rackspace will notify customers in Release Notes when and
        if the contract does change.</para>
    </section>
    <section xml:id="Concepts">
    <title>Concepts</title>
    <?dbhtml stop-chunking?>
    <para> To use the &PRODNAME; API effectively, you should
    understand several key concepts: </para>
    <section xml:id="Cluster">
      <title>Cluster</title>
        <para>
          A group of servers (nodes). In &PRODABBV;, the servers are virtual.</para>
    </section>
    <section xml:id="Data_transfer">
      <title>Data Transfer</title>
      <para>A method by to move data from a non-Cloud machine by FTP or
        by SSH from your Cloud Files account.</para>
    </section>
      <section xml:id="SCP_Server">
        <title>SCP Server Proxy</title>
        <para>An SCP service that runs on your Hadoop cluster which distributes
          your files across the cluster.
        </para>
      </section>
      <section xml:id="HDFS">
        <title>HDFS</title>
        <para>The Hadoop Distributed Files System. This is the default file system 
          used in &PRODNAME;. 
        </para>
      </section>
      <section xml:id="MapReduce">
        <title>MapReduce</title>
        <para>A framework for performing calculations on the data in the distributed 
          file system. Map tasks run in parallel with each other; Reduce tasks also 
          run in parallel with each other.
        </para>
      </section>  
      <section xml:id="Node">
        <title>Node</title>
        <para>A single computer in a cluster.
        </para>
      </section>
      <section xml:id="Service_Catalog">
        <title>Service Catalog</title>
        <para>
          Your service catalog is the list of services available to you, 
          as returned along with your authentication token and an 
          expiration date for that token. All the services in your 
          service catalog should recognize your token as valid 
          until it expires.
        </para>
        <para>
          The catalog listing for each service provides at least 
          one endpoint URL for that service. Other information, 
          such as regions and versions and tenants, is provided 
          if it's relevant to your access to this service.
        </para>
      </section> 
      <section xml:id="Tenant_Id">
        <title>Tenant ID</title>
        <para>A tenant is a container used to group or isolate resources 
          and/or identity objects. Depending on the service operator, a 
          tenant may map to a customer, account, organization, or project.
        </para>
      </section>
    </section>
  </preface>
  
  <chapter xml:id="General_API_Information-d1e633"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml">
    <title>General API Information</title>
    <para> The &PRODNAME; API is implemented using a ReSTful
      web service interface. Like other products in the Rackspace
      Cloud suite, &PRODNAME; shares a common token-based
      authentication system that allows seamless access between
      products and services. </para>
    <note>
      <para> All requests to authenticate against and operate the
        service are performed using SSL over HTTP (HTTPS) on TCP port
        443. </para>
    </note>
    
    
    
    
    <section xml:id="Authentication-d1e647">
      <title>Authentication</title>
      <para> Every ReST request against the &PRODNAME; Service
        requires the inclusion of a specific authorization token,
        supplied by the <code>X-Auth-Token</code> HTTP header.
        Customers obtain this token by first using the Rackspace Cloud
        Authentication Service and supplying a valid username and API
        access key. 
      </para>
      <para>
        To authenticate, submit a <code>POST/v2.0/tokens</code> request, 
        presenting valid Rackspace customer credentials 
        in the message body to a Rackspace authentication endpoint. 
      </para>
      <para>
        <emphasis role="bold">GET YOUR CREDENTIALS</emphasis>
      </para>
      <para> You can use either of two sets of credentials: <itemizedlist>
        <listitem>
          <para>your <code>username</code> and
            <code>password</code></para>
        </listitem>
        <listitem>
          <para>your <code>username</code> and <code>API
            key</code></para>
        </listitem>
      </itemizedlist>
      </para>
      <para>
        Your <code>username</code> and
        <code>password</code> are the ones you use to login to the 
        Rackspace control panel. Once you are logged in, you can use 
        the Rackspace control panel to obtain your <code>API key</code>.
      </para>
      <para>
        Use the control panel for the region in which your account is based: 
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              US-based accounts use the control panel at <link xlink:href="https://manage.rackspacecloud.com/">https://manage.rackspacecloud.com/</link>.
            </para>
          </listitem>
            <listitem>
            <para> UK-based accounts use the control panel at
            <link xlink:href="https://lon.manage.rackspacecloud.com/">
            https://lon.manage.rackspacecloud.com/</link>. 
            </para>
            </listitem>
        </itemizedlist> 
      </para>
      <para>
        <emphasis role="bold">CHOOSE YOUR AUTHENTICATION </emphasis>
      </para>
      <para>
        Use the authentication endpoint for the region in which your account is based:
        <itemizedlist>
          <listitem>
            <para>All accounts authenticate through
              <link xlink:href="https://identity.api.rackspacecloud.com/v2.0/tokens">
                identity.api.rackspacecloud.com/v2.0/tokens</link>.</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">SEND YOUR CREDENTIALS TO YOUR AUTHENTICATION
          ENDPOINT</emphasis>
      </para>
      <para> If you know your credentials and your authentication
        endpoint, and you can issue a <code>POST
          /v2.0/tokens</code> request in an API call, you have
        all the basic information you need to use the Rackspace
        Cloud Identity Service. 
      </para>
      <para> You can use <link xlink:href="http://curl.haxx.se/"
        >cURL</link> to try the authentication process in two
        steps: get a token; send the token to a service.<orderedlist>
          <listitem>
            <para>Get an authentication token by providing
              your username and either your API key or your
              password. Here are examples of both
              approaches:</para>
            <para><emphasis>You can request a token by
              providing your username and your API
              key.</emphasis></para>
            <para>
              <literallayout class="monospaced">curl -X POST https://auth.api.rackspacecloud.com/v2.0/tokens -d 
'{ "auth":{ "RAX-KSKEY:apiKeyCredentials":{ "username":"theUserName", "apiKey":"00a00000a000a0000000a000a00aaa0a" } } }' -H "Content-type: application/json"</literallayout>
            </para>
            <para><emphasis>You can request a token by
              providing your username and your
              password.</emphasis></para>
            <para>
              <literallayout class="monospaced">curl -X POST https://auth.api.rackspacecloud.com/v2.0/tokens -d
'{"auth":{"passwordCredentials":{"username":"theUserName","password":"thePassword"}}}' -H "Content-type: application/json"</literallayout>
            </para>
            <para> Successful authentication returns a token
              which you can use as evidence that your
              identity has already been authenticated. To
              use the token, pass it to other services as an
              <code>X-Auth-Token</code> header. </para>
            <para> Authentication also returns a service
              catalog, listing the endpoints you can use for
              Cloud services. </para>
          </listitem>
          <listitem>
            <para>Use the authentication token to send a GET
              to a service you would like to use. Here is an
              example of passing an authentication token to
              the Cloud Files service, using the Cloud Files
              service catalog endpoint that was returned
              along with the token.</para>
            <para><emphasis>You can use a token and a service endpoint to tell a service 
              that your credentials are valid.</emphasis></para>
          </listitem>
        </orderedlist>
      </para>

      
      <para>Authentication tokens are typically valid for 24 hours.
        Applications should be designed to re-authenticate after
        receiving a 401 (Unauthorized) response from a service
        endpoint. </para>
      <important>
        <para>If you are programmatically parsing an authentication
          response, please be aware that service names are stable
          for the life of the particular service and can be used as
          keys. You should also be aware that a user's service
          catalog can include multiple uniquely-named services which
          perform similar functions. In Auth 2.0,
          the service type attribute can be used as a key by which
          to recognize similar services; see the tip below.
        </para>
      </important>    
    </section>
    
    <section xml:id="Request_Response_Types-d1e903">
      <title>Request/Response Types</title>
      <para> The &PRODNAME; API supports JSON data 
        serialization formats. The request format is
        specified using the <code>Content-Type</code> header and is
          required for calls that have a request
        body. The response format can be specified in requests either
        by using the <code>Accept</code> header or by adding
        <code>.json</code> extension to the
        request URI. Note that JSON is the default format for 
        data serialization.</para>
      
      <table rules="all">
        <caption>Response Formats</caption>
        <?dbfo keep-together="always"?>
        <thead>
          <tr align="center">
            <td>Format</td>
            <td>Accept Header</td>
            <td>Query Extension</td>
            <td>Default</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>JSON</td>
            <td>application/json</td>
            <td>.json</td>
            <td>Yes</td>
          </tr>
          <tr>
            <td>XML</td>
            <td>application/xml</td>
            <td>.xml</td>
            <td>No</td>
          </tr>
        </tbody>
      </table>
    </section>

    <section xml:id="volume_status">
      <title>Statuses</title>
      <para>
        <table rules="all" security="reviewer">
          <caption>Statuses</caption>
          <?dbfo keep-together="always"?>
          <thead>
            <tr align="center">
              <td>Response Code</td>
              <td>Message</td>
              <td>When</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>401</td>
              <td>Not authorized</td>
              <td>Invalid or missing token</td>
            </tr>
            <tr>
              <td>403</td>
              <td>Access is denied to this resource</td>
              <td>Attempted a create/update/delete but user only has read permissions</td>
            </tr>
            <tr>
              <td>404</td>
              <td>The resource could not be found</td>
              <td>User requested an invalid URL or invalid resource by ID</td>
            </tr>
          </tbody>
        </table>
      </para>

    </section>
  </chapter>

  <chapter xml:id="volume">
    <title>API Operations</title>
    <para>The CBD API allows you to manage Hadoop clusters.</para>
    <!-- adding API commands here -->
    <section xml:id="Create_Cluster">
      <title>Create New Cluster</title>
    <informaltable rules="all">
      <thead>
        <tr align="center">
          <td colspan="1">Verb</td>
          <td colspan="2">URI</td>
          <td colspan="3">Description</td>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td colspan="1">&POST;</td>
          <td colspan="2">/clusters</td>
          <td colspan="3">Create a new cluster.</td>
        </tr>
      </tbody>
    </informaltable>
    <simpara>
      Normal Response Code(s): <returnvalue>200 (OK)</returnvalue>
    </simpara>
    <simpara> Error Response Code(s): 400 (Invalid Response Body), 400 (User profile needs to be created),
   400 (Invalid Node Count), 400 (Not Valid flavor), 400 (Malformed Data), 413 (Quota Exceeded)</simpara>
    <para> This call creates a new cluster.</para>
    <para> The following example show the request and corresponding response to List all Clusters
      for the specified account:</para>
    <example>
      <title>Create Cluster Request: JSON</title>
      <literallayout class="monospaced">    
    {"cluster":
    { "name": "slice",
      "clusterType": "hadoop",
      "flavorId": "2",
      "nodeCount": 5
    }
    }
    </literallayout>
    </example>
    <example>
      <title>Create Cluster Response: JSON</title>
      <literallayout class="monospaced">
    {"cluster":
    { "id": "db478fc1-2d86-4597-8010-cbe787bbbc41",
      "created": "2012-12-27T10:10:10Z",
      "updated": "",
      "name": "slice",
      "clusterType": "hadoop",
      "flavorId": "2",
      "nodeCount": 5,
      "status": "BUILD",
    }
    }
      </literallayout>
    </example>
    </section>
    
    
    <section xml:id="List_All_Clusters">
      <title>List All Clusters</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/clusters</td>
            <td colspan="3">List all clusters for account.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200 (OK)</returnvalue>
      </simpara>
      <simpara> Error Response Code(s):  </simpara>
      <para> This call lists all clusters for the specified account.</para>
      <para> The following example show the request and corresponding response to List all Clusters for 
        the specified account:</para>
      <example>
        <title>List Clusters Request: JSON</title>
        <literallayout class="monospaced">
        N/A
        </literallayout>
      </example>
      <example>
        <title>List Clusters Response: JSON</title>
        <literallayout class="monospaced">
        {"clusters":
          [
            { "id": "db478fc1-2d86-4597-8010-cbe787bbbc41",
              "name": "slice",
              "created": "2012-12-27T10:10:10Z",
              "updated": "2012-12-27T10:15:10Z", 
              "clusterType": "hadoop",
              "flavorId": "2",
              "nodeCount": 5,
              "status": "ACTIVE",
            },
            { "id": "ac111111-2d86-4597-8010-cbe787bbbc41",
              "name": "real",
              "created": "2012-12-27T10:10:10Z",
              "updated": "2012-12-27T10:15:10Z", 
              "clusterType": "hbase",
              "flavorId": "4",
              "nodeCount": 20,
              "status": "ACTIVE",
            },
          ]
        }
        </literallayout>
      </example>
   
    </section>
    
    
    <section xml:id="Get_Cluster_Details">
      <title>Get Cluster Details</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/clusters/{id}</td>
            <td colspan="3">Gets details for a cluster.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200 (OK)</returnvalue>
      </simpara>
      <simpara> Error Response Code(s): <errorcode>404</errorcode> (Not Found)</simpara>
      <para> This call gets details for the specified cluster.</para>
      <para> The following example show the request and corresponding response to Get Details for a Cluster:</para>

      <example>
        <title>Get Cluster Details: JSON</title>
        <literallayout class="monospaced">
        GET https://dfw.bigdata.api.rackspacecloud.com/v1.0/7654321/clusters/
          ac111111-2d86-4597-8010-cbe787bbbc41
        Accept: application/json 
        X-Auth-Token:ea85e6ac-baff-4a6c-bf43-848020ea3812
        Content-Type: application/json
        </literallayout>
      </example>
        <example>
          <title>Get Cluster Details: JSON</title>
          <literallayout class="monospaced">
        Status: 200 OK
        Date: Mon, 06 Aug 2012 21:54:21 GMT
        Content-Type: application/json
        Content-Length: 110
        {"cluster":
           {  "id": "db478fc1-2d86-4597-8010-cbe787bbbc41",
              "created": "2012-12-27T10:10:10Z",
              "updated": "2012-12-27T10:20:10Z",  
              "name": "slice",
              "clusterType": "hadoop",
              "flavorId": "2",
              "nodeCount": 5,
              "status": "ACTIVE",
          }
        }

        </literallayout>
        </example>
    </section>
    
    <section xml:id="Resize_Custer">
      <title>Resize a Cluster</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&POST;</td>
            <td colspan="2">/clusters/{clusterId}/action</td>
            <td colspan="3">Resizes a cluster.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200 (OK)</returnvalue>
      </simpara>
      <simpara> Error Response Code(s): <errorcode>400</errorcode> (Unacceptable
        parameters), <errorcode>400</errorcode> (Malformed data), <errorcode>404</errorcode> 
        (Not Found), <errorcode>409</errorcode> (Invalid State)</simpara>
      <para></para>
      <para> The following example show the request and corresponding response to Performing
        an Action on a cluster:</para>
      <example>
        <title>Perform Action on a Cluster Request: JSON</title>
        <literallayout class="monospaced">
        {"resize":
            { "nodeCount": 10
            }
        } 
        </literallayout>
      </example>
      <example>
        <title>Perform Action on a Cluster: JSON</title>
        <literallayout class="monospaced">
        {"cluster":
            { "id": "db478fc1-2d86-4597-8010-cbe787bbbc41",
              "created": "2012-12-27T10:10:10Z",
              "updated": "2012-12-27T16:20:10Z",
              "name": "slice",
              "clusterType": "hadoop",
              "flavorId": "2",
              "nodeCount": 10,
              "status": "RESIZING",
            }
        } 
        </literallayout>
      </example>
      <para></para>
    </section>      
        


    <section xml:id="List_Cluster_Nodes">
      <title>List Cluster Nodes</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/clusters/{id}/nodes</td>
            <td colspan="3">List all nodes for a cluster.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200 (OK)</returnvalue>
      </simpara>
      <simpara> Error Response Code(s): <errorcode>404</errorcode> (Not Found)</simpara>
      <para> This call lists all server nodes for the specified cluster.</para>
      <para> The following example show the request and corresponding response to List all 
        Nodes for a Cluster:</para>
      <example>
        <title>List Cluster Nodes Request: JSON</title>
        <literallayout class="monospaced">
        GET https://dfw.bigdata.api.rackspacecloud.com/v1.0/7654321/clusters/ 
          ac111111-2d86-4597-8010-cbe787bbbc41/nodes
        Accept: application/json 
        X-Auth-Token:ea85e6ac-baff-4a6c-bf43-848020ea3812
        Content-Type: application/json
        </literallayout>
      </example>
      <example>
        <title>List Cluster Nodes Response: JSON</title>
        <literallayout class="monospaced">
        {"nodes":
          [ 
            { "id": "000",
              "created": "2012-12-27T10:10:10Z", 
              "role": "NAMENODE",
              "name": "NAMENODE-1", 
              "status": "ACTIVE",
              "ip": {"public": "168.x.x.3", "private": "10.x.x.3"} ,
              "services": [ 
                    {"name": "jobtracker"},
                    {"name": "namenode"}
                  ]   
          }, 
            { "id": "aaa",
              "role": "GATEWAY",
              "name": "GATEWAY-1", 
              "status": "ACTIVE",
              "ip": {"public": "168.x.x.4", "private": "10.x.x.4"} ,
              "services": [ 
                    {"name": "hive", "uri": "thrift://10.x.x.4"},
                    {"name": "pig"},
                    {"name": "cluster-status", "uri": "}, 
                  ]  
            },
            { "id": "bbb",
              "role": "DATANODE",
              "name": "DATANODE-1",  
              "status": "ACTIVE",
              "ip": {"public": "168.x.x.5", "private": "10.x.x.5"} , 
            },
            { "id": "ccc",
              "role": "DATANODE",
              "name": "DATANODE-2",  
              "status": "ACTIVE",
              "ip": {"public": "168.x.x.6", "private": "10.x.x.6"} , 
            } 
        ] 
      } 

        </literallayout>
      </example>
      <para></para>
    </section>
    
    
    <section xml:id="Get_Node_Details">
      <title>Get Node Details</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/clusters/{id}/nodes/{id}</td>
            <td colspan="3">Get details for node in a cluster.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200 (OK)</returnvalue>
      </simpara>
      <simpara> Error Response Code(s): <errorcode>404</errorcode> (Not Found)</simpara>
      <para> This call gets details for a node as specified by the cluster id and node id.</para>
      <para> The following example show the request and corresponding response to Get Details 
        for a Node within a Cluster:</para>
      <example>
        <title>Get Node Details Request: JSON</title>
        <literallayout class="monospaced">
        GET https://dfw.bigdata.api.rackspacecloud.com/v1.0/7654321/clusters/ 
          ac111111-2d86-4597-8010-cbe787bbbc41/nodes/aaa
        Accept: application/json 
        X-Auth-Token:ea85e6ac-baff-4a6c-bf43-848020ea3812
        Content-Type: application/json
        </literallayout>
      </example>
      <example>
        <title>Get Node Details Response: JSON</title>
        <literallayout class="monospaced">
        {"node":
          { "id": "000",
            "created": "2012-12-27T10:10:10Z", 
            "role": "NAMENODE",
            "name": "NAMENODE-1", 
            "status": "ACTIVE",
            "ip": {"public": "168.x.x.3", "private": "10.x.x.3"} ,
            "services": [ 
              {"name": "jobtracker"},
              {"name": "namenode"}
              ] 
          } 
        }

        </literallayout>
      </example>
      <para></para>
    </section>
    
<!--    
    <section xml:id="Create_New_Cluster">
      <title>Create New Cluster</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&POST;</td>
            <td colspan="2">/clusters</td>
            <td colspan="3">Create a new cluster.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue>
      </simpara>
      <simpara> Error Response Code(s): <errorcode>400</errorcode> (Invalid Response
        Body), <errorcode>400</errorcode> (User profile needs to be created),
        <errorcode>400</errorcode> (Invalid Node Count, <errorcode>400</errorcode>
        (Quota exceeded), <errorcode>400</errorcode> (Malformed Data)</simpara>
      <para> This call creates a new cluster.</para>
      <para> The POST request must contain a 'clusters' object that contains the 
        parameters for the create request.
      </para>
        <para> The following examples show the requests and corresponding responses to list all clusters for the specified account:</para>
        <example>
          <title>Create Cluster Request: JSON</title>
          <literallayout class="monospaced">
        GET https://dfw.bigdata.api.rackspacecloud.com/v1.0/7654321/clusters 
        Accept: application/json 
        X-Auth-Token:ea85e6ac-baff-4a6c-bf43-848020ea3812
        Content-Type: application/json
        Content-Length: 78
        {"cluster":
          { "name": "slice",
            "clusterType": "hadoop",
            "flavorId": "2",
            "nodeCount": 5
           } 
         }
        </literallayout>
        </example>
        <example>
          <title>Create Cluster Response: JSON</title>
          <literallayout class="monospaced">
        Status: 200 OK
        Date: Mon, 06 Aug 2012 21:54:21 GMT
        Content-Type: application/json
        Content-Length: 114
        {"cluster":
          { "id": "db478fc1-2d86-4597-8010-cbe787bbbc41",
            "created": "2012-12-27T10:10:10Z",
            "updated": "", 
            "name": "slice",
            "clusterType": "hadoop",
            "flavorId": "2",
            "nodeCount": 5,
            "status": "BUILD",
           } 
          }
        </literallayout>
        </example>
        <para></para>
    </section>
-->    
    
    <section xml:id="Delete_Cluster">
      <title>Delete Cluster</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&DELETE;</td>
            <td colspan="2">/clusters/{id}</td>
            <td colspan="3">Deletes a cluster.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>204</returnvalue>
      </simpara>
      <simpara> Error Response Code(s): <errorcode>400</errorcode> (missingOrInvalidParams),
        <errorcode>404</errorcode> (Resource Not Found), <errorcode>409</errorcode> (Invalid State)
        </simpara>
      <para> This call deletes a cluster.</para>
      <para> The following examples show the requests and corresponding responses to delete a cluster:</para>
      <example>
        <title>Delete Cluster Request: JSON</title>
        <literallayout class="monospaced">
        DELETE https://dfw.bigdata.api.rackspacecloud.com/v1.0/7654321/clusters/
          db478fc1-2d86-4597-8010-cbe787bbbc41
        Accept: application/json 
        X-Auth-Token:ea85e6ac-baff-4a6c-bf43-848020ea3812
        Content-Type: application/json
        </literallayout>
      </example>
      <example>
        <title>Delete Cluster Response: JSON</title>
        <literallayout class="monospaced">
        Status: 202 Accepted
        Date: Mon, 06 Aug 2012 21:54:21 GMT
        Content-Type: application/json
        {"cluster":
          { "id": "db478fc1-2d86-4597-8010-cbe787bbbc41",
            "created": "2012-12-27T10:10:10Z",
            "updated": "", 
            "name": "slice",
            "clusterType": "hadoop",
            "flavorId": "2",
            "nodeCount": 5,
            "status": "DELETING",
           } 
          }

        </literallayout>
      </example>
      <para></para>
    </section>
    
    <section xml:id="View_Profile">
      <title>View Profile Information</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/profile</td>
            <td colspan="3">Returns detailed information for the current user profile.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue> (OK)
      </simpara>
      <simpara> Error Response Code(s): N/A
      </simpara>
      <para></para>
      <para>The following example shows the request and corresponding response to viewing profile information:</para>
      <example>
        <title>Get Profile Request: JSON</title>
        <literallayout class="monospaced">
        N/A
        </literallayout>
      </example>
      <example>
        <title>Get Profile Response: JSON</title>
        <literallayout class="monospaced">
        {"profile":
            { "username": "john.doe",
              "user_id" : "12346",
              "tenant_id" : "123456",
              "sshkeys": [{"name": "t@test"}],
              "cloudCredentials": {}
            }
        }
        </literallayout>
      </example>
      <para></para>
    </section>

    <section xml:id="Update_Profile">
      <title>Update Profile</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&POST;</td>
            <td colspan="2">/profile</td>
            <td colspan="3">Updates the information on an existing profile.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue> (OK)
      </simpara>
      <simpara> Error Response Code(s): <errorcode>400</errorcode> (Malformed Data),
        <errorcode>400</errorcode> (Unacceptable parameters)
      </simpara>
      <para>This call allows you to update the information for an existing profile.</para>
      <para>The following example shows the request and corresponding response to updating a profile:</para>
      <example>
        <title>Update Profile Request: JSON</title>
        <literallayout class="monospaced">
        { "profile": {
            "username": "john.doe",
            "password": "j0Hnd03",
            "sshkeys": [
              { "name": "t@test",
                "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCtUFnkFrqDDCgEqW1akQkpMOX 
                Owwvg73PLn5Z5QgvxjvJhRCg9ZTR/OWXpWcYqFVNagH4Zs8NOb9921TyQ+ydMnatOM             
                haxMh1ZwTgaUcvndOF8fY+kcERiw1l0iT95w42F8IdUH42Z+8KihZM8gVsbMS6qYTi 
                OM29WHX7y37wuJIzqf3N2TiVXrqfjwugvY/bZ+47EUn78uk6aPZYJGXdDgaFqnIXUV  
                N+hRFYXgKnU0Ui0aQkuYwnAW8KmanLoNU2xodrb6/XqWnSAAmwl7aoGKFunQsT6xDW 
                yQk+ncUHUcdofDUqgd3lXmHGrTmQW97vqexDEnhsJ+AwbLGD5dukr t@test"
              }
            ],
            "cloudCredentials": {
              "username": "jdoe",
              "apikey": "df23gkh34h52gkdgfakgf"
            }
        }
        </literallayout>
      </example>
      <example>
        <title>Update Profile Response: JSON</title>
        <literallayout class="monospaced">
        {"profile":
         { "username": "john.doe",
         "user_id" : "12346",
         "tenant_id" : "123456",
         "sshkeys": [{"name": "t@test"}],
         "cloudCredentials": {"username": "jdoe", "apikey": "df23gkh34h52gkdgfakgf"}
         }
        }
        </literallayout>
      </example>
      <para></para>
    </section>

    <section xml:id="List_Flavores">
      <title>List Available Flavors</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/flavors</td>
            <td colspan="3">List all available flavors.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue> (OK)
      </simpara>
      <simpara> Error Response Code(s): N/A
      </simpara>
      <para> This call lists all available flavors, including the drive size and amount of RAM.</para>
      <para> The following example shows the request and corresponding response to listing the flavors:</para>
      <example>
        <title>List Flavors Request: JSON</title>
        <literallayout class="monospaced">
        N/A
        </literallayout>
      </example>
      <example>
        <title>List Flavors Response: JSON</title>
        <literallayout class="monospaced">
        {"flavors":
        [
        {
        "id":
        "1",
        "name":
        "hadoop.small",
        "ram":
        "5120MB",
        "vcpus":
        1,
        "disk":
        "375GB",
        }
        {
        "id":
        "2",
        "name":
        "hadoop.medium",
        "ram":
        "10240MB",
        "vcpus":
        2,
        "disk":
        "750GB",
        },
        {
        "id":
        "3",
        "name":
        "hadoop.large",
        "ram":
        "20480MB",
        "vcpus":
        4,
        "disk":
        "1500GB",
        }
        ]
        
        </literallayout>
      </example>
      <para></para>
    </section>

    <section xml:id="List_Flavor_Details">
      <title>List Flavor Details</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/flavors/{flavorId}</td>
            <td colspan="3">Lists the details for a specified flavor.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue> (OK)
      </simpara>
      <simpara> Error Response Code(s): <errorcode>404</errorcode> (Resource Not Found)
      </simpara>
      <para> This call lists the details for a specified flavor.</para>
      <para> The following example shows the request and corresponding response to List Flavor Details:</para>
      <example>
        <title>List Flavor Details Request: JSON</title>
        <literallayout class="monospaced">
        N/A
        </literallayout>
      </example>
      <example>
        <title>List Flavor Details Response: JSON</title>
        <literallayout class="monospaced">
        {"flavor":
            { "id": "1",
              "name": "hadoop.small",
              "ram": "5120MB",
              "vcpus": 1,
              "disk": "375GB",
            }
        }

        </literallayout>
      </example>
      <para></para>
    </section>



    <section xml:id="List_Cluster_Types">
      <title>List Cluster Types</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/types</td>
            <td colspan="3">Lists the cluster types.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue> (OK)
      </simpara>
      <simpara> Error Response Code(s): N/A
      </simpara>
      <para> The following example shows the request and corresponding response to List Cluster Types:</para>
      <example>
        <title>List Cluster Types Request: JSON</title>
        <literallayout class="monospaced">
        N/A
        </literallayout>
      </example>
      <example>
        <title>List Cluster Types Response: JSON</title>
        <literallayout class="monospaced">
        {"types":
        [
        {
        "name":
        "hadoop",
        "version":
        1.1,
        },
        {
        "name":
        "hbase",
        "version":
        1.1
        },
        ]
        }
        </literallayout>
      </example>
      <para></para>
    </section>
    
    <section xml:id="View_Cluster_Details">
      <title>View Cluster Details</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/types/{typeId}</td>
            <td colspan="3">Shows the details for a given cluster type.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue> (OK)
      </simpara>
      <simpara> Error Response Code(s): <errorcode>404</errorcode> (Resource Not Found)
      </simpara>
      <para> This call displays the detailed information for a specified cluster.</para>
      <para> The following example shows the request and corresponding response to view cluster details:</para>
      <example>
        <title>View Cluster Details Request: JSON</title>
        <literallayout class="monospaced">
        N/A
        </literallayout>
      </example>
      <example>
        <title>View Cluster Details Response: JSON</title>
        <literallayout class="monospaced">
        {"type":
        {
        "name":
        "hadoop",
        "version":
        1.1,
        "services":
        [
        {"name":
        "mapreduce",
        Response Code Message
        "version":
        1.0.3
        },
        {"name":
        "hdfs",
        "version":
        1.0.3
        },
        {"name":
        "pig",
        "version":
        0.9.2
        },
        {"name":
        "hive",
        "version":
        0.9.0
        }
        ]
        },
        }

        </literallayout>
      </example>
      <para></para>
    </section>

    <section xml:id="List_Supported_Flavors">
      <title>List Supported Flavors for Type</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/types/{typeId}/flavors</td>
            <td colspan="3">Lists the supported flavors for a specified cluster type.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue> (OK)
      </simpara>
      <simpara>Error Response Code(s): <errorcode>404</errorcode> (Resource Not Found)
      </simpara>
      <para> This call lists all the flavors that a specified cluster type supports.</para>
      <para> The following example shows the request and corresponding response to list supported flavors:</para>
      <example>
        <title>List Supported Flavors for Type Request: JSON</title>
        <literallayout class="monospaced">
        N/A
        </literallayout>
      </example>
      <example>
        <title>List Supported Flavors for Type Response: JSON</title>
        <literallayout class="monospaced">
        {"flavors":
        [
        {
        "id":
        "1",
        "name":
        "hadoop.small",
        "ram":
        "5120MB",
        "vcpus":
        1,
        "disk":
        "375GB",
        },
        {
        "id":
        "2",
        "name":
        "hadoop.medium",
        "ram":
        "10240MB",
        "vcpus":
        2,
        "disk":
        "750GB",
        }, 
        {
        "id":
        "3",
        "name":
        "hadoop.large",
        "ram":
        "20480MB",
        "vcpus":
        4,
        "disk":
        "1500GB",}
        ]
        }

        </literallayout>
      </example>
      <para></para>
    </section>
    
    <section xml:id="List_Supported_Types">
      <title>List Supported Cluster Types for a Flavor</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/flavors/{flavorId}/types</td>
            <td colspan="3">Lists supported cluster types for a specified flavor.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue> (OK)
      </simpara>
      <simpara> Error Response Code(s): <errorcode>404</errorcode> (Resource Not Found)
      </simpara>
      <para> This call displays all the supported cluster types for a specified flavor.</para>
      <para> The following example shows the request and corresponding response to List 
        Supported Cluster Types for a Flavor:</para>
      <example>
        <title>List Supported Cluster Types for a Flavor Request: JSON</title>
        <literallayout class="monospaced">
        N/A
        </literallayout>
      </example>
      <example>
        <title>List Supported Cluster Types for a Flavor Response: JSON</title>
        <literallayout class="monospaced">
        {"type":
        {
        "name":
        "hadoop",
        "version":
        1.1,
        "services":
        [
        {"name":
        "mapreduce",
        "version":
        1.0.3
        },
        {"name":
        "hdfs",
        "version":
        1.0.3
        },
        {"name":
        "pig",
        "version":
        0.9.2
        },
        {"name":
        "hive",
        "version":
        0.9.0
        }
        ]
        },
        }
        </literallayout>
      </example>
    </section>    

    <section xml:id="User_Limits">
      <title>View Resource Limits</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/limits</td>
            <td colspan="3">Displays the resource limits for the user.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue> (OK)
      </simpara>
      <simpara> Error Response Code(s): N/A
      </simpara>
      <para> This call displays the resource limits such as remaining node count, 
        available RAM, and remaining disk space, for the user.</para>
      <para> The following example shows the request and corresponding response to View Resource Limits:</para>
      <example>
        <title>View Resource Limits Request: JSON</title>
        <literallayout class="monospaced">
        N/A
        </literallayout>
      </example>
      <example>
        <title>View Resource Limits Response: JSON</title>
        <literallayout class="monospaced">
        {"limits":
          {"absolute":
            {"nodeCount": {"value": 100, "remaining": 50},
            "ram": {"value": 50000, "remaining": 34567},
            "disk": {"value": 100000, "remaining": 28882},
            "vcpus": {"value": 50, "remaining": 25}
            }
          }
        }

        </literallayout>
      </example>
      <para></para>
    </section>

    <!--     
    <section xml:id="Sample">
      <title>Sample Call</title>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&DELETE;</td>
            <td colspan="2">/clusters/{id}</td>
            <td colspan="3">Deletes a cluster.</td>
          </tr>
        </tbody>
      </informaltable>
      <simpara>
        Normal Response Code(s): <returnvalue>200</returnvalue> (OK)
      </simpara>
      <simpara> Error Response Code(s): <errorcode>400</errorcode> (missingOrInvalidParams),
        <errorcode>404</errorcode> (Resource Not Found), <errorcode>409</errorcode> (Invalid State)
      </simpara>
      <para> This call XXX.</para>
      <para> The following example shows the request and corresponding response to XXX:</para>
      <example>
        <title> Request: JSON</title>
        <literallayout class="monospaced">
        
        </literallayout>
      </example>
      <example>
        <title> Response: JSON</title>
        <literallayout class="monospaced">


        </literallayout>
      </example>
      <para></para>
    </section>
-->    
    
  </chapter>

</book>
