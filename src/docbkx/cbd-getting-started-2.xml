<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash "&#x2013;">
        <!ENTITY mdash "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        <!ENTITY PRODNAME "Cloud Big Data">
        <!ENTITY PRODABBV "CBD">
        
        <!-- Authentication endpoints -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">

        <!-- Useful for specs -->
        <!ENTITY MAY '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MAY</emphasis>'>
        <!ENTITY SHOULD '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">SHOULD</emphasis>'>
        <!ENTITY MUST '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST</emphasis>'>
        <!ENTITY MUST_NOT '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST NOT</emphasis>'>

        <!ENTITY CHECK '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Check_mark_23x20_02.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>

        <!ENTITY ARROW '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="img/Arrow_east.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
]>

<book version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xml:id="cbd-getting-started">
    
    <?rax title.font.size="35px" subtitle.font.size="20px"?>
    <title>Rackspace Cloud Big Data Getting Started Guide, v2</title>
    <?rax status.bar.text.font.size="40px"
          status.bar.text=""?>   
    <titleabbrev>Cloud Big Data Getting Started Guide, v2</titleabbrev>
     
    <info>
        
        <copyright>
            <year>2015</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v2.0</releaseinfo>
        <productname>Rackspace Cloud Big Data</productname>
        <pubdate>2015-06-30</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the doc build process.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This guide is intended for software developers interested in developing
                applications using the Rackspace &PRODNAME; Application Programming Interface
                    (<abbrev>API</abbrev>). </para>
        </abstract>
        <revhistory>
            <revision xmlns:wadl="http://wadl.dev.java.net/2009/02">
                <date>2015-06-30</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Initial General Availability (GA) release of Cloud Big Data, v2.
                            </para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
    <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <raxm:displayname>Getting Started Guide, v2</raxm:displayname>
            <raxm:product version="v1.0">cbd</raxm:product>
            <raxm:priority>10</raxm:priority>
        </raxm:metadata>
    </info>
   
      <chapter xml:id="CBD_Overview">
        <title>Overview</title>
        <para xmlns:wadl="http://wadl.dev.java.net/2009/02">Rackspace
            &PRODNAME; is an on-demand Apache Hadoop service for the
            Rackspace open cloud. The service supports a RESTful API
            and alleviates the pain associated with deploying,
            managing, and scaling Hadoop clusters. </para>
        <para xmlns:wadl="http://wadl.dev.java.net/2009/02">Cloud Big
            Data is just as flexible and feature-rich as Hadoop. With
            Cloud Big Data, you benefit from on-demand servers,
            utility-based pricing, and access to the full set of
            Hadoop features and APIs. However, you do not have to
            worry about provisioning, growing, or maintaining your
            Hadoop infrastructure. The Cloud Big Data service uses an
            environment that is specifically optimized for Hadoop,
            which ensures that your jobs run efficiently and reliably.
            Note that you are still responsible for developing,
            troubleshooting, and deploying your applications. </para>
        <remark xmlns:wadl="http://wadl.dev.java.net/2009/02"
            >Reviewers: If you have an architecture diagram for Cloud
            Big Data that you want included here, please send it to
            me.</remark>
<!--CBD team is working with marketing to create this.          
        <para 
            xmlns:wadl="http://wadl.dev.java.net/2009/02">The
            following figure shows an overview of Cloud Big Data: </para>
          <para>Figure coming from CBD team</para>
-->            
        <para xmlns:wadl="http://wadl.dev.java.net/2009/02">The
            primary use cases for &PRODNAME; are as follows: </para>
        <itemizedlist xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <listitem>
                <para>Create on-demand infrastructure for applications
                    in production where physical servers would be too
                    costly and time-consuming to configure and
                    maintain.</para>
            </listitem>
            <listitem>
                <para>Develop, test, and pilot data analysis
                    applications.</para>
            </listitem>
        </itemizedlist>
        <para xmlns:wadl="http://wadl.dev.java.net/2009/02">&PRODNAME;
            provides the following benefits: <itemizedlist>
                <listitem>
                    <para>Create or resize Hadoop clusters in minutes
                        and pay only for what you use.</para>
                </listitem>
                <listitem>
                    <para>Access the Hortonworks Data Platform (HDP),
                        an enterprise-ready distribution that is 100
                        percent Apache open source.</para>
                </listitem>
                <listitem>
                    <para>Provision and manage Hadoop through an
                        easy-to-use Control Panel and a RESTful
                        API.</para>
                </listitem>
                <listitem>
                    <para>Seamlessly access data in Cloud Files
                        containers.</para>
                </listitem>
                <listitem>
                    <para>Gain interoperability with any third-party
                        software tool that supports HDP.</para>
                </listitem>
                <listitem>
                    <para>Access Fanatical SupportÂ® on a 24x7x365
                        basis via chat, phone, or ticket.</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>This guide provides examples for the following ways to use the Cloud Big Data
            API:</para>
        <itemizedlist>
            <listitem>
                <para>Using the API directly with cURL</para>
            </listitem>
            <listitem>
                <para>Using the python-lavaclient command-line client (CLI) </para>
            </listitem>
        </itemizedlist>
        <para>Examples for both ways to make request to Cloud Big Data are provided for
            authentication (<xref linkend="CBD_Generating_Auth_Token"/> and <xref
                linkend="CBD_authClient"/>and for creating and managing clusters (<xref
                linkend="CBD_createManageClusters"/>. </para>
        <section xml:id="CBD_concepts">
            <title>Cloud Big Data concepts</title>
            <para xmlns:wadl="http://wadl.dev.java.net/2009/02">To use the Cloud Big Data API
                effectively, you should understand the following terminology:<itemizedlist>
                    <listitem>
                        <para><glossterm>Credentials</glossterm>: Credentials allow you to set up
                            SSH keys and other connector credentials for use with clusters. Ex: Cloud Files credentials.</para>
                    </listitem>
                    <listitem>
                        <para><glossterm>Distros</glossterm>: Distros provide a list of supported
                            distributions and their corresponding versions, as well as a list of
                            supported services and components per distribution.</para>
                    </listitem>
                    <listitem>
                        <para><glossterm>Stacks</glossterm>: Stacks are high-level building blocks
                            of software that compose a Big Data architecture. Stacks are composed of
                            services, which in turn are composed of components. A stack is specific
                            to a distribution because of the differences in services that are
                            supported across distributions.</para>
                    </listitem>
                    <listitem>
                        <para><glossterm>Clusters</glossterm>: A cluster is a group of servers
                            (nodes). Cloud Big Data supports both virtual and OnMetal servers.</para>
                    </listitem>
                    <listitem>
                        <para><glossterm>Nodes</glossterm>: A node is either a virutal or an OnMetal server
                            that serves a particular role in the cluster. A node runs one or more components in the 
                            Hadoop ecosystem.</para>
                    </listitem>
                    <listitem>
                        <para><glossterm>Scripts</glossterm>: You can create a custom script that
                            runs during various phases of the cluster's life cycle. The script is
                            invoked on all nodes of the cluster. The script type currently supported
                            is <code>POST_INIT</code>, which runs after the cluster is completely
                            set up. The script must be executable. Preferably, the script should be
                            a bash script, but it could be a Python script or a self-contained
                            executable that works with the base libraries of the installed
                            OS.</para>
                    </listitem>
                    <listitem>
                        <para><glossterm>Flavor</glossterm>: A flavor is an available configuration
                            for each node in a Cloud Big Data cluster. Each flavor has a unique combination of memory
                            capacity, priority for CPU time and storage space.</para>
                    </listitem>
                    <listitem>
                        <para><glossterm>Resource limits</glossterm>: Resource limits include items
                            such as remaining node count, available RAM, and remaining disk space
                            for the user.</para>
                    </listitem>
                </itemizedlist></para>
            <para xmlns:wadl="http://wadl.dev.java.net/2009/02">For the definitions of additional
                terminology related to Cloud Big Data, see the <xref linkend="glossary_1"/>.</para>
        </section>
        <section xml:id="use_cases">
            <title>Use cases</title>
            <para>Use cases for Cloud Big Data include but not limited to the following examples:</para>
            <itemizedlist>
                <listitem>
                    <para>Clickstream Analysis</para>
                    <para>Analyze click stream data in order to segment users and understand user preferences. 
                        Advertisers can also analyze click streams and advertising impression logs to 
                        deliver more effective ads.</para>
                </listitem>
                <listitem>
                    <para>Log Analysis</para>
                    
                    <para>Process logs generated by web and mobile applications. Cloud Big Data Platform helps 
                        customers turn petabytes of un-structured or semi-structured data into useful 
                        insights about their applications or users.</para>
                </listitem>
                <listitem>
                    <para>Sentiment Analysis</para>
                    <para>Examine a corpus of text to determine the attitude of a speaker or a writer 
                        with respect to some topic or the overall contextual polarity of a document.</para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="core_concepts">
            <title>Prerequisites for running examples</title>
            <para xmlns:wadl="http://wadl.dev.java.net/2009/02">In order to run the examples in this
                guide, you must have the following prerequisites:<itemizedlist spacing="compact">
                    <listitem>
                        <para>A Rackspace Cloud account</para>
                    </listitem>
                    <listitem>
                        <para>A Rackspace Cloud username and password, as specified during
                            registration</para>
                    </listitem>
                    <listitem>
                        <para>Prior knowledge of HTTP/1.1 conventions</para>
                    </listitem>
                    <listitem>
                        <para>Basic familiarity with Cloud and RESTful APIs</para>
                    </listitem>
                    <listitem>
                        <para>Prior knowledge of Hadoop or a third-party tool that works with
                            Hadoop</para>
                    </listitem>
                    <listitem>
                        <para>Ability to work with the Hortonworks Data Platform (HDP)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para xmlns:wadl="http://wadl.dev.java.net/2009/02">By using the &PRODNAME; API, you
                understand and agree to the following limitations and conditions:<itemizedlist
                    spacing="compact">
                    <listitem>
                        <para>&PRODNAME; includes a Swift integration feature wherein Hadoop,
                            MapReduce, Pig, Hive and Spark jobs can directly reference Cloud Files
                            containers. </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
      <section xml:id="Pricing_SLA-d1e1362">
            <title>Pricing and service level</title>
            <para>&PRODNAME; is part of the Rackspace Cloud and your use through the API will be
                billed according to the pricing schedule at <link
                    xlink:href="http://www.rackspace.com/cloud/big-data/pricing"
                    >http://www.rackspace.com/cloud/big-data/pricing</link>. </para>
         
            <para>The Service Level Agreement (SLA) for Cloud Big Data is available at <link
                    xlink:href="http://www.rackspace.com/cloud/legal/sla"
                    >http://www.rackspace.com/cloud/legal/sla</link>.</para>
               
        </section>
    </chapter>
    <chapter xml:id="Service_Access_Endpoints-d1e753">
        <title>Service access endpoints</title>
        <para xmlns:wadl="http://wadl.dev.java.net/2009/02">The
            &PRODNAME; service is a regionalized service. The user of
            the service is therefore responsible for appropriate
            replication, caching, and overall maintenance of
            &PRODNAME; data across regional boundaries to other Cloud
            Servers.</para>
        <para xmlns:wadl="http://wadl.dev.java.net/2009/02">The
            endpoints to use for your Cloud Big Data API calls are
            summarized in the table below.</para>

            <para>To help you decide which regionalized endpoint to use, read the Knowledge Center article about special
                considerations for choosing a data center at <link
                    xlink:href="http://www.rackspace.com/knowledge_center/article/about-regions"
                    >About Regions</link>.
            </para>

        <para xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <table rules="all">
                <caption>Regionalized service endpoints</caption>
                <thead>
                    <tr align="center">
                        <td colspan="2">Region</td>
                        <td colspan="5">Endpoint</td>
                    </tr>
                </thead>
                <tbody>
                    <tr align="left">
                        <td colspan="2">Chicago (ORD)</td>
                        <td colspan="5"
                                    ><code>https://ord.bigdata.api.rackspacecloud.com/v2/</code><parameter><replaceable>yourAccountID</replaceable></parameter>/ </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">Dallas/Ft. Worth (DFW)</td>
                        <td colspan="5"
                                    ><code>https://dfw.bigdata.api.rackspacecloud.com/v2/</code><parameter><replaceable>yourAccountID</replaceable></parameter>/ </td>
                    </tr>
                    <tr align="left">
                        <td colspan="2">London (LON)</td>
                        <td colspan="5"
                                    ><code>https://lon.bigdata.api.rackspacecloud.com/v2/</code><parameter><replaceable>yourAccountID</replaceable></parameter>/ </td>
                    </tr>
                    <tr>
                        <td colspan="2">Northern Virginia (IAD)</td>
                        <td colspan="5"
                                    ><code>https://iad.bigdata.api.rackspacecloud.com/v2/</code><parameter><replaceable>yourAccountID</replaceable></parameter>/
                        </td>
                    </tr>
                </tbody>
            </table>
        </para>
        <para xmlns:wadl="http://wadl.dev.java.net/2009/02">Replace the
                    <code><replaceable>yourAccountID</replaceable></code> placeholder with your
            actual account number, which is returned as part of the authentication service response,
            after the final <emphasis role="bold">/</emphasis> in the <code>publicURL</code> field. </para>
        <note>
            <para>All examples in this guide assume that you are
                operating against the DFW data center. If you are
                using a different data center, be sure to use the
                associated endpoint from the table above.</para>
        </note>
        <para>When you perform a Cloud Big Data API operation, place the endpoint at the beginning
            of the request URL. For example:
                    <code>https://dfw.bigdata.api.rackspacecloud.com/v2/<replaceable>yourAccountID</replaceable>/</code>.</para>
    </chapter>
    
      
    <chapter xml:id="CBD_sendingAPI_Requests">
        <title>Sending requests to Cloud Big Data</title>
        <para>You have several options for sending requests to Cloud Big Data: </para>
        <itemizedlist>
            <listitem>
                <para>You can use cURL, the command-line tool from <link
                        xlink:href="http://curl.haxx.se/">http://curl.haxx.se/</link>. With cURL,
                    you can send HTTP requests and receive responses back from the command line. </para>
            </listitem>
            <listitem>
                <para>You can use the python-lavaclient CLI.</para>
            </listitem>
            <listitem>
                <para>If you like to use a more graphical interface you can use the Rackspace Cloud Control Panel 
                    <link xlink:href="https://mycloud.rackspace.com"
                        >https://mycloud.rackspace.com</link>.
                </para>
            </listitem>
        </itemizedlist>
        <section xml:id="CBD_usingCurl">
            <title>Using cURL</title>
            <para>You can use cURL, the command-line tool from <link
                    xlink:href="http://curl.haxx.se/">http://curl.haxx.se/</link>. With cURL, you
                can send HTTP requests and receive responses back from the command line. </para>
            <section xml:id="CBD_using-curl-cli">
                <title>Sending API requests by using cURL</title>
                <para>cURL is a command-line tool that is available in most UNIX system-based
                    environments and Apple Mac OS X systems, and can be downloaded for Microsoft
                    Windows to interact with REST interfaces. For more information about cURL, visit
                        <link xlink:href="http://curl.haxx.se/">http://curl.haxx.se/</link>. </para>
                <para>cURL enables you to transmit and receive HTTP requests and responses from the
                    command line or from within a shell script. As a result, you can work with the
                    REST API directly without using one of the client APIs.</para>
                <para>The following cURL command-line options are used in this guide to run the
                    examples:</para>
                <table xml:id="curl_options" rules="all" width="75%">
                    <caption>cURL command-line options</caption>
                    <thead>
                        <tr>
                            <th>Option</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <option>-d</option>
                            </td>
                            <td>
                                <para>Sends the specified data in a &POST; request to the HTTP
                                    server. Use this option to send a JSON request body to the
                                    server.</para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <option>-H</option>
                            </td>
                            <td>
                                <para>Specifies an extra HTTP header in the request. You can specify
                                    any number of extra headers. Precede each header with the
                                        <option>-H</option> option. </para>
                                <para>Common headers in Rackspace API requests are as follows:<itemizedlist>
                                        <listitem>
                                            <para><literal>Content-Type</literal>. Required for
                                                operations with a request body. </para>
                                            <para>Specifies the format of the request body. The
                                                syntax for the <literal>Content-Type</literal>
                                                header is as follows:</para>
                                            <screen><computeroutput>Content-Type: application/<parameter>format</parameter></computeroutput></screen>
                                            <para><parameter>format</parameter> is
                                                  <literal>json</literal>.</para>
                                        </listitem>
                                        <listitem>
                                            <para><literal>X-Tenant-Id</literal>. Optional.
                                                Specifies the Tenant ID, which is your your account
                                                number.</para>
                                        </listitem>
                                        <listitem>
                                            <para><literal>Accept</literal>. Optional. </para>
                                            <para>Specifies the format of the response body. The
                                                syntax for the <literal>Accept</literal> header is
                                                as follows:</para>
                                            <screen><computeroutput>Accept: application/<parameter>format</parameter></computeroutput></screen>
                                            <para><parameter>format</parameter> is
                                                  <literal>json</literal>. The default is
                                                  <code>json</code>.</para>
                                        </listitem>
                                        <listitem>
                                            <para><literal>X-Auth-Token</literal>. Required.
                                                Specifies the authentication token.</para>
                                        </listitem>
                                    </itemizedlist></para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <option>-i</option>
                            </td>
                            <td>
                                <para>Includes the HTTP header in the output. </para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <option>-s</option>
                            </td>
                            <td>
                                <para>Silent or quiet mode. Does not show progress or error
                                    messages. Makes cURL mute. </para>
                                <para><emphasis role="bold">Note: </emphasis>If your cURL command is
                                    not generating any output, try replacing the <code>-s</code>
                                    option with <code>-i</code>.</para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <option>-T</option>
                            </td>
                            <td>
                                <para>Transfers the specified local file to the remote URL.</para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <option>-X</option>
                            </td>
                            <td>
                                <para>Specifies the request method to use when communicating with
                                    the HTTP server. The specified request is used instead of the
                                    default method, which is &GET;. </para>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <note xml:id="json_tool">
                    <title>About json.tool</title>
                    <para>For commands that return a response, you can append the following code to
                        the command to call json.tool to pretty-print output: </para>
                    <programlisting language="bash" role="gutter: false">| python -m json.tool</programlisting>
                    <para>To use json.tool, import the json module. For information about json.tool,
                        see <link xlink:href="http://docs.python.org/2/library/json.html">json â
                            JSON encoder and decoder</link>. </para>
                    <para>If you do not want to pretty-print JSON output, omit this code. </para>
                </note>
            </section>
            <section xml:id="Copying-and_Pasting-cURL-d1e003">
                <title>Copying and pasting cURL request examples into a terminal window</title>
                <para>To run the cURL request examples shown in this guide on Linux or Mac systems,
                    perform the following actions:</para>
                <orderedlist>
                    <listitem>
                        <para>Copy and paste each example from the HTML version of this guide into
                            an ASCII text editor (for example, vi or TextEdit). You can click on the
                            small document icon to the right of each request example to select
                            it.</para>
                    </listitem>
                    <listitem>
                        <para>Modify each example with your required account information and so on,
                            as detailed in this guide.</para>
                    </listitem>
                    <listitem>
                        <para>After you are finished modifying the text for the cURL request example
                            with your information (for example, your username and your API key),
                            paste the command into your terminal window. </para>
                    </listitem>
                    <listitem>
                        <para>Press <guilabel>Enter</guilabel> to run the cURL command.</para>
                    </listitem>
                </orderedlist>
                <note>
                    <para>The carriage returns in the cURL request examples that are part of the
                        cURL syntax are escaped with a backslash (\) to avoid prematurely
                        terminating the command. However, you should not escape carriage returns
                        inside the JSON message within the command.</para>
                </note>
                <para>Consider the following cURL authentication request: JSON example, which is
                    described in detail in <xref linkend="CBD_Generating_Auth_Token"/>.</para>
                <para>
                    <example>
                        <title>cURL authenticate request: JSON</title>
                        <?dbfo keep-together="always"?>
                        <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'{
    "auth":
    {
       "RAX-KSKEY:apiKeyCredentials":
       {
          "username": "<emphasis role="bold">yourUserName</emphasis>",
          "apiKey": "<emphasis role="bold">yourApiKey</emphasis>"}
    }
}' \
<option>-H 'Content-Type: application/json'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
                    </example>
                </para>
                <para>Notice that the lines that are part of the cURL command syntax have been
                    escaped with a backslash (\) to indicate that the command continues on the next
                    line.</para>
                <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
  
   
(... lines within the JSON portion of the message are not shown in this example)
(... the example only shows lines that are part of cURL syntax)     
     

   
<option>-H 'Content-Type: application/json'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
                <para>However, the lines within the JSON portion of the message are not escaped with
                    a backslash to avoid issues with the JSON processing.</para>
                <screen language="bash">'{
    "auth":
    {
       "RAX-KSKEY:apiKeyCredentials":
       {
          "username": "<emphasis role="bold">yourUserName</emphasis>",
          "apiKey": "<emphasis role="bold">yourApiKey</emphasis>"}
    }
}' \
</screen>
                <para>The final line of the JSON message is escaped because the backslash lies
                    outside the JSON message and continues the cURL command to the next line.</para>
                <tip>
                    <para>If you have trouble copying and pasting the examples as described, try
                        typing the entire example on one long line, removing all the backslash line
                        continuation characters.</para>
                </tip>
            </section>
        </section>
        <section xml:id="CBD_useClient">
            <title>Setting up python-lavaclient CLI</title>
            <para>Another way you can send requests to Cloud Big Data is to use the python-lavaclient 
                CLI. This section provides the prerequisites for use of the client and installation
                instructions.</para>
            <section xml:id="clientPrereqs">
                <title>Prerequisites</title>
                <para>Following are the requirements for using the python-lavaclient CLI:</para>
                <itemizedlist>
                    <listitem>
                        <para>Computer running Linux or Mac OS X</para>
                    </listitem>
                    <listitem>
                        <para>Python 2.7.2 or later</para>
                    </listitem>
                    <listitem>
                        <para>Rackspace Cloud account and access to Rackspace Cloud Big Data</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="CBD_clientInstall">
                <title>Installing the CLI</title>
                <para>Perform the following steps to install the CLI. </para>
                <orderedlist>
                    <listitem>
                        <para>Install python-lavaclient from PyPI using pip.</para>
                        <programlisting>$ pip install lavaclient</programlisting>
                    </listitem>
                    <listitem>
                        <para>Run the help command to ensure that the client has been installed
                            correctly and note the usage information: </para>
                        <programlisting>$ lava help</programlisting>
                    </listitem>
                </orderedlist>
            </section>
        </section>
    </chapter>
    
    <chapter xml:id="CBD_Generating_Auth_Token">
        <title>Generating an authentication token using cURL</title>
            <para>Whether you use cURL or a REST client to interact with the Cloud Big Data API, you
                must generate an authentication token. You provide this token in the X-Auth-Token
                header in each Cloud Big Data API request. <xref linkend="JSON-Auth-Request-d1003"/>
                demonstrates how to use cURL to obtain the authentication token as well as your
                account number. You must provide both when making subsequent Cloud Big Data API
                requests.</para>
        <para>Remember to replace the placeholders in the following authentication request examples
                with your information:<itemizedlist spacing="compact">
                    <listitem>
                        <para><emphasis role="bold">yourUserName</emphasis> &mdash;Your common Cloud
                            Big Data user name, as supplied during registration.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">yourApiKey</emphasis> &mdash; Your API access
                            key. You can obtain the key from the <link
                                xlink:href="http://mycloud.rackspace.com/">Rackspace Cloud Control
                                Panel</link> in the <guimenu>Your Account</guimenu> /
                                <guimenuitem>API Keys</guimenuitem> section.</para>
                    </listitem>
                </itemizedlist><note>
                    <para>This guide uses <emphasis role="bold">yourUserName</emphasis> and
                            <emphasis role="bold">yourApiKey</emphasis> for authentication. For
                        information about other supported authentication methods, see <link
                            xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Token_Calls.html"
                            >Authentication tokens</link> in the <citetitle>Cloud Identity Client
                            Developer Guide</citetitle>.</para>
                </note></para>
        <para>Use the following global endpoint to access the Cloud Identity service for
                authentication: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para><link xlink:href="&ENDPOINT-US-20;"
                        >&ENDPOINT-US-20;</link>
                </para>
            </listitem>
        </itemizedlist>
<!--        <para>Your account might be based in either the US or the UK. The location of your account
                is not determined by your physical location but by the location of the Rackspace
                retail site that was used to create your account: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para> If your account was created via <link
                        xlink:href="http://www.rackspacecloud.com"
                        >http://www.rackspacecloud.com</link>, it is a
                    US-based account. </para>
            </listitem>
            <listitem>
                <para> If your account was created via <link
                        xlink:href="http://www.rackspace.co.uk"
                        >http://www.rackspace.co.uk</link>, it is a
                    UK-based account. </para>
            </listitem>
        </itemizedlist>
        
        <para>If you are unsure how your account was created, use the Rackspace contact information
                at either site to ask for help. </para> 
-->                
        <para>You authenticate by using the URL
                    <code>https://identity.api.rackspacecloud.com/v2.0/tokens</code> for the Cloud
                Identity services. Note that the <code>v2.0</code> component in the URL indicates
                that you are using version 2.0 of the Cloud Identity API.</para>
        <example xml:id="JSON-Auth-Request-d1003">
            <title>cURL authenticate request: JSON</title>
            <?dbfo keep-together="always"?>
            <screen language="bash"><command>curl</command> <option>-s</option> <option>-d</option> \
'{
    "auth":
    {
       "RAX-KSKEY:apiKeyCredentials":
       {
          "username": "<emphasis role="bold">yourUserName</emphasis>",
          "apiKey": "<emphasis role="bold">yourApiKey</emphasis>"}
    }
}' \
<option>-H 'Content-Type: application/json'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        </example>
            <para>In the authentication response (example follows), the authentication <code>token
                    id</code> is returned with an <code>expires</code> attribute that specifies when
                the token expires. Remember to supply your authentication token wherever you see the
                placeholder <emphasis role="bold">yourAuthToken</emphasis> in the examples in this
                guide.</para>
            <note>
                <title>Notes</title>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>The values that you receive in your
                            responses vary from the examples shown in
                            this document because they are specific to
                            your account.</para>
                    </listitem>
                    <listitem>
                        <para> The <code>expires</code> attribute
                            denotes the time after which the token
                            will automatically become invalid. A token
                            might be manually revoked before the time
                            identified by the <code>expires</code>
                            attribute. The attribute predicts a
                            token's maximum possible lifespan but does
                            not guarantee that it will reach that
                            lifespan. Clients are encouraged to cache
                            a token until it expires.</para>
                    </listitem>
                    <listitem>
                        <para>Applications should be designed to
                            re-authenticate after receiving a 401
                            (Unauthorized) response from a service
                            endpoint.</para>
                    </listitem>
                </itemizedlist>
            </note>
            <para>The <code>publicURL</code> endpoints for &PRODNAME; (for example
                    <code>https://dfw.bigdata.api.rackspacecloud.com/v2/1100111</code>) are also
                returned in the response. </para>
            <para>Your actual account number is after the final slash
                (/) in the <code>publicURL</code> field. In the
                following examples, the account number is 1100111. You
                must specify <emphasis role="italic">your</emphasis>
                account number on most of the &PRODNAME; API
                operations, wherever you see the placeholder <emphasis
                    role="bold">yourAccountID</emphasis> specified in
                the examples in this guide.</para>
            <para>After authentication, you can use cURL to perform <command>GET</command>,
                    <command>DELETE</command>, and <command>POST</command> requests for the
                &PRODNAME; API.</para>

        <example>
            <title>Authenticate response: JSON</title>
            <programlisting language="json"><xi:include href="../../src/resources/samples/auth-20-v2.json" parse="text"/></programlisting>
        </example>
    </chapter>
    
    <chapter xml:id="CBD_authClient"><title>Generating an authentication token using the lavaclient</title>
        <para>To authenticate your session by using the lavaclient, follow these steps. You need your
            Cloud user name, API key and Tenant ID</para>
        <orderedlist>
            <listitem>
                <para>Run the <code>authenticate</code> command as shown with the below paramters.</para>
                <programlisting>$ lava --user [username] --tenant [tenant_id] --api-key [api_key] --region DFW authenticate
                </programlisting>
                <para>If the command runs successfully, your authentication token is displayed, as shown in the following example.</para>
                <example>
                    <title>Authentication response using CLI utility</title>
                    <programlisting>AUTH_TOKEN=692c2a14-39ad-4ee0-991d-06cd7331f3ca
                    </programlisting>
                </example>
            </listitem>
            <listitem>
                <para>Export the AUTH_TOKEN and LAVA2_API_URL environment variables as shown in the
                    following example. Replace yourTenantId with the actual value.</para>
                <example>
                    <title>Export environment variables</title>
                    <programlisting>$ export AUTH_TOKEN=692c2a14-39ad-4ee0-991d-06cd7331f3ca
$ export LAVA2_API_URL=https://dfw.bigdata.api.rackspacecloud.com/v1.0/yourTenantId</programlisting>
                </example>
                <note>
                    <para>The <code>export</code> commands are valid only for the current session.
                        You need to rerun the <code>export</code> commands if, for example, you
                        create a new console window.</para>
                </note>
            </listitem>
            <listitem>
                <para>To confirm that the client is running, run the distro list command.</para>
                <programlisting>$ lava distros list
+--------+---------------------------+---------+
|   ID   |            Name           | Version |
+--------+---------------------------+---------+
| HDP2.2 | HortonWorks Data Platform |   2.2   |
+--------+---------------------------+---------+
</programlisting>
            </listitem>
        </orderedlist></chapter>
    <chapter xml:id="createManageCredentials">
        <title>Creating and managing credentials</title>
        <para>Before you can create Hadoop clusters, you must create credentials. Credentials allow
            you to setup ssh keys and other connector credentials for use with clusters.</para>
        <note>
            <para>Your Cloud Big Data credentials are different from your cloud account. Your
                credentials have the following characteristics and requirements:</para>
            <itemizedlist>
                <listitem>
                    <para>A credential is the configuration for the administration and login account
                        for the cluster.</para>
                </listitem>
                <listitem>
                    <para>You can create any number of SSH Credentials and attach to a cluster.</para>
                </listitem>
                <listitem>
                    <para>Each cluster can contain only on Cloud Files credential connector.</para>
                </listitem>
            </itemizedlist>
        </note>
        <para>After you create a credential, you can attach that credentiat to clusters that you provision 
            by using the API. This allows you to
            remotely SSH into a server to transfer data, run or troubleshoot jobs, and so on.</para>
            <section xml:id="createCredential">
                <title>Creating a credential</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"> /v2/{tenant_id}/credentials/{type} </td>
                            <td colspan="3">Creates a credential.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>This operation adds new credentials for a specific type. Based on the chosen
                    type, <code>ssh_keys</code> or <code>cloud_files</code>, the request body
                    varies. A general pattern is followed of a dict of the type that contains one or
                    more credential related fields.</para>
                <section xml:id="curlCreateCredential">
                    <title>cURL example</title>
                    <para>The following examples show the cURL request and corresponding response
                        for creating a credential.</para>
                    <example>
                        <title>cURL create a credential - ssh_keys request</title>
                        <programlisting language="bash">curl -i -X POST https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/credentials/ssh_keys -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json" 
 </programlisting>
                    </example>
                    <example>
                        <title>Create a credential - ssh_keys request: JSON body</title>
                        <programlisting language="json"><xi:include href="../wadl/samples/lava2/create_ssh_credential_request.json" parse="text"/></programlisting>
                    </example>
                    <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                        <title>Create a credential - ssh_keys response: JSON</title>
                        <programlisting language="json"><xi:include href="../wadl/samples/lava2/create_ssh_credential_response.json" parse="text"/>
</programlisting>
                    </example>
                    <example>
                        <title>cURL create a credential - cloud_files request</title>
                        <programlisting language="bash">curl -i -X POST https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/credentials/cloud_files -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json" 
 </programlisting>
                    </example>
                    <example>
                        <title>Create a credential - cloud_files request: JSON body</title>
                        <programlisting language="json"><xi:include href="../wadl/samples/lava2/create_cf_credential_request.json" parse="text"/></programlisting>
                    </example>
                    <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                        <title>Create a credential - cloud_files response: JSON</title>
                        <programlisting language="json"><xi:include href="../wadl/samples/lava2/create_cf_credential_response.json" parse="text"/>
</programlisting>
                    </example>
                </section>
                <section xml:id="clientCreateCredential">
                    <title>Client example</title>
                    <para>Using the client,  create credentials as shown in the following example. </para>
                    <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                        <title>Create a SSH credential using the CLI </title>
                        <programlisting language="json">$ lava credentials create_ssh_key cbdkey "ssh-rsa AAkphQZaDNi2Ij3DX...5twE62lerq7Xhaff foo@bar"
+------+---------+
| Type | SSH Key |
| Name |  cbdkey |
+------+---------+
</programlisting>
                    </example>
                    <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                        <title>Create a Cloud Files credential using the CLI </title>
                        <programlisting language="json">$ lava credentials create_cloud_files cfuser samplekey
+----------+-------------+
| Type     | Cloud Files |
| Username |      cfuser |
+----------+-------------+
</programlisting>
                    </example>
                </section>
            </section>
            <section xml:id="listCredentials">
                <title>Listing all credentials</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"> /v2/{tenant_id}/credentials </td>
                            <td colspan="3">Lists all user credentials.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>This operation lists all user credentials. </para>
                <section xml:id="curelListCredentials">
                    <title>cURL example</title>
                    <para>This operation does not accept a request body. </para>
                    <para>The following examples show the cURL request and corresponding response
                        for listing all user credentials.</para>
                    <example>
                        <title>cURL list all credentials request</title>
                        <programlisting language="bash">curl -i -X GET https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/credentials -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json" 
 </programlisting>
                    <programlisting language="json"><xi:include href="../wadl/samples/lava2/list_credentials.json" parse="text"/>
</programlisting>
                    </example>                    
                </section>
                <section xml:id="clientListCredentials">
                    <title>Client example</title>
                    <para>Using the client, list all credentials as shown in the following example. </para>
                <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                    <title>List all credentials using the CLI </title>
                    <programlisting language="json">$ lava credentials list
+-------------+--------+
|     Type    |  Name  |
+-------------+--------+
|   SSH Key   | cbdkey |
| Cloud Files | cfuser |
+-------------+--------+
</programlisting>
                </example>
                </section>
            </section>
            <section xml:id="updateCredentials">
                <title>Updating credentials</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2"> /v2/{tenant_id}/credentials/{type}/{name} </td>
                            <td colspan="3">Updates the specified user credential.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>The update marks clusters that already use the credential as out of
                    sync.</para>
                <section xml:id="curlUpdateCredentials">
                    <title>cURL example</title>
                    <para>The following examples show the cURL request and corresponding response
                        for updating a credential.</para>
                    <example>
                        <title>cURL update a credential request</title>
                        <programlisting language="bash">curl -i -X PUT https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/credentials/ssh_keys/cbdkey -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json" 
 </programlisting>
                    </example>
                    <example>
                        <title>Update a credential request: JSON body</title>
                        <programlisting language="json"><xi:include href="../wadl/samples/lava2/update_credential_request.json" parse="text"/></programlisting>
                    </example>
                    <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                        <title>Update a credential response: JSON</title>
                        <programlisting language="json"><xi:include href="../wadl/samples/lava2/update_credential_response.json" parse="text"/>
</programlisting>
                    </example>
                </section>
                <section xml:id="clientUpdateCredentials">
                    <title>Client example</title>
                    <para>Using the client, update a credential as shown in the following example. </para>
                <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                    <title>Update a credential using the CLI </title>
                    <programlisting language="json">$ lava credentials update_ssh_key cbdkey "ssh-rsa AAkphQZaDNi2Ij3DX...5twE62lerq7Xhaff foo@bar"
+------+---------+
| Type | SSH Key |
| Name |  cbdkey |
+------+---------+
</programlisting>
                </example>
                </section>
            </section>
            <section xml:id="deleteCredentials">
                <title>Deleting credentials</title>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"> /v2/{tenant_id}/credentials/{type}/{name} </td>
                            <td colspan="3">Deletes the specified user credential.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>You can delete only credentials that are not used by any active
                clusters.</para>
                <section xml:id="curlDeleteCredentials">
                    <title>cURL example</title>
                    <para>The following example show the cURL request for deleting a
                    credential.</para>
                    <example>
                        <title>cURL delete a credential request</title>
                        <programlisting language="bash">curl -i -X DELETE https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/credentials/ssh_keys/cbdkey -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json" 
 </programlisting>
                    </example>
                <para>This operation does not accept a request body. </para>
                <para>This operation does not return a response body. </para>
                </section>
                <section xml:id="clientDeleteCredential">
                    <title>Client example</title>
                    <para>Using the client, delete a credential as shown in the following example. </para>
                <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                    <title>Delete a credential using the CLI </title>
                    <programlisting language="json">$ lava credentials delete_ssh_key cbdkey
                    </programlisting>
                </example>             
                </section>
            </section>
    </chapter>
    <chapter xml:id="viewResourceLimits">
        <title>Viewing resource limits</title>
        <para>The use of the Rackspace Cloud Big Data API is subject to resource limits. You can
            view the limits associated with your account by using the operation to view the resource
            limits, which displays limits such as remaining node count, available RAM, and remaining
            disk space for the user.</para>
        <informaltable rules="all" xmlns:wadl="http://wadl.dev.java.net/2009/02">
            <thead>
                <tr align="center">
                    <td colspan="1">Verb</td>
                    <td colspan="2">URI</td>
                    <td colspan="3">Description</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="1">&GET;</td>
                    <td colspan="2">/v2/{tenant_id}/limits</td>
                    <td colspan="3">Displays the resource limits for the user.</td>
                </tr>
            </tbody>
        </informaltable>
        <section xml:id="curlViewResourceLimits">
            <title>cURL example</title>
            <para>This operation does not accept a request body.</para>
            <para>The following examples show the cURL request and corresponding response for
                viewing resource limits.</para>
            <example>
                <title>cURL view resource limits request: JSON</title>
                <programlisting language="bash">curl -i -X GET https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/limits -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json" </programlisting>
            </example>
            <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                <title>View resource limits response: JSON</title>
                <programlisting language="json"><xi:include href="../../src/wadl/samples/lava2/get_limits_response.json" parse="text"/>
</programlisting>
            </example>
        </section>
        <section xml:id="clientViewResourceLimits">
            <title>Client example</title>
            <para>Using the client, view the limits associated with your account by using the
                    <code>limits</code> command. </para>
            <example>
                <title>View resource limits</title>
                <programlisting>$ lava limits get
+-------------------------------+
|             Quotas            |
+----------+--------+-----------+
| Property |  Limit | Remaining |
+----------+--------+-----------+
|  Nodes   |     20 |        18 |
|   RAM    | 614400 |    599040 |
|   Disk   | 115000 |    112500 |
|  VCPUs   |    160 |       156 |
+----------+--------+-----------+
</programlisting>
            </example>
        </section>
    </chapter>
    <chapter xml:id="CBD_createManageClusters"><title>Creating and managing Hadoop clusters</title><para>Now you are ready to create and manage Hadoop clusters by using the Rackspace Cloud Big Data
            API. This chapter provides examples, using cURL and the client, for some of the common
            operations against Cloud Big Data.  For information about all of the
            operations available in Cloud Big Data, see the <citetitle>Cloud Big Data Developer
                Guide, v2</citetitle>. </para>
    <section xml:id="CBD_listFlavors">
            <title>Listing flavors</title>
            <para>A flavor is an available hardware configuration for a cluster. Each flavor has a
                unique combination of memory capacity and priority for CPU time. The larger the
                flavor size you use, the larger the amount of RAM and the higher the priority for
                CPU time your cluster receives.</para>
            <para>You use the operation to list flavors to find the available configurations for
                your cluster, and then you decide which size you need for your cluster. You perform
                this operation when you create a cluster. </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/v2/{tenant_id}/flavors</td>
                        <td colspan="3">Lists all available flavors.</td>
                    </tr>
                </tbody>
            </informaltable>
            <section xml:id="curl_listFlavor">
                <title>cURL example</title>
            
            <para>This operation does not require a request body.</para>
            <para>The following examples show the cURL request and the corresponding response for
                listing flavors. </para>
            <example>
                <title>cURL list flavors request: JSON</title>
                <programlisting language="bash">curl -i -X GET https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/flavors -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json"</programlisting>
            </example>
            <example>
                <title>List flavors response: JSON</title>
                <programlisting language="json"><xi:include href="../../src/wadl/samples/lava2/list_flavors_response.json" parse="text"/></programlisting>
            </example></section>
        <section xml:id="client_listFlavor">
                <title>Client example</title>
                <para>You can enumerate the flavors and associated resources by using the
                        <code>flavor-list</code> command, as shown in the following example.</para>
                <example>
                    <title>List flavors and associated resources by using the flavor-list command
                        with the CLI </title>
                    <programlisting>$ lava flavors list
+------------+------------------------+-------+-------+-------+
|     ID     |          Name          |   RAM | VCPUs |  Disk |
+------------+------------------------+-------+-------+-------+
| hadoop1-15 | Medium Hadoop Instance | 15360 |     4 |  2500 |
| hadoop1-30 | Large Hadoop Instance  | 30720 |     8 |  5000 |
| hadoop1-60 | XLarge Hadoop Instance | 61440 |    16 | 10000 |
| hadoop1-7  | Small Hadoop Instance  |  7680 |     2 |  1250 |
+------------+------------------------+-------+-------+-------+
</programlisting>
                </example>
            </section>
    </section>
            <section xml:id="CBD_listDistros">
                <title>Listing available distros</title>
                <para>Distros provide a list of supported distributions and their corresponding
                    versions, as well as a list of supported services and components per
                    distribution.</para>
                <para>Use the operation to list the distros to see the distros that are available. </para>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/v2/{tenant_id}/distros</td>
                            <td colspan="3">Lists available distros.</td>
                        </tr>
                    </tbody>
                </informaltable>
            <section xml:id="curl_listDistros">
                <title>cURL example</title>
            
                <para>This operation does not accept a request body.</para>
                <para>The following examples show the cURL request and the corresponding response
                    for listing cluster types. </para>
                <example>
                    <title>cURL list available distros request: JSON</title>
                    <programlisting language="bash">curl -i -X GET https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/distros -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json"</programlisting>
                </example>
                <example>
                    <title>List available distros response: JSON</title>
                    <programlisting language="json"><xi:include href="../../src/wadl/samples/lava2/list_distros_response.json" parse="text"/></programlisting>
                </example>
            </section>
            <section xml:id="client_listDistros">
                <title>Client example</title>
                <para>Using the client, view available distros as shown in the following
                    example.</para>
                <example>
                    <title>View available distros with the CLI </title>
                    <programlisting>$ lava distros list
+--------+---------------------------+---------+
|   ID   |            Name           | Version |
+--------+---------------------------+---------+
| HDP2.2 | HortonWorks Data Platform |   2.2   |
+--------+---------------------------+---------+
</programlisting>
                </example>
            </section>
            </section>            
            <section xml:id="CDB_listStacks">
                <title>Listing available stacks </title>
                <para xmlns:wadl="http://wadl.dev.java.net/2009/02">Stacks are high-level building
                    blocks of software that compose a Big Data architecture. Stacks are comprised of
                    services, which in turn are comprised of components. A stack is specific to a
                    distribution due to the differences in services that are supported across
                    distributions.</para>
                <para xmlns:wadl="http://wadl.dev.java.net/2009/02">You can create a stack or use
                    one of the preconfigured stacks. </para>
                <informaltable rules="all" xmlns:wadl="http://wadl.dev.java.net/2009/02">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/v2/{tenant_id}/stacks</td>
                            <td colspan="3">Lists available stacks.</td>
                        </tr>
                    </tbody>
                </informaltable>
            <section xml:id="curl_listStacks">
                <title>cURL example</title>           
                <para xmlns:wadl="http://wadl.dev.java.net/2009/02">The following examples show the
                    cURL request and corresponding response for listing all stacks. This operation
                    does not accept a request body.</para>
                <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                    <title>cURL list all stacks request: JSON</title>
                    <programlisting language="bash">curl -i -X GET https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/stacks -d \         
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json"                 </programlisting>
                </example>
                <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                    <title>List all stacks response: JSON</title>
                    <programlisting language="json"><xi:include href="../../src/wadl/samples/lava2/list_stacks_response.json" parse="text"/></programlisting>
                </example>
            </section>
                <section xml:id="client_listStacks"><title>Client example</title>
                <para>Using the client, view available stacks as shown in the following example. </para>
                <example>
                    <title>View available stacks with the CLI </title>
                    <programlisting>$ lava stacks list
+---------------+---------------------------+--------+---------------------------------------------------+----------------------------------+
|       ID      |            Name           | Distro |                    Description                    |             Services             |
+---------------+---------------------------+--------+---------------------------------------------------+----------------------------------+
| HADOOP_HDP2_2 |       Hadoop HDP 2.2      | HDP2.2 |   Core batch processing systems and interactive   | [{name=HDFS, modes=[Secondary]}, |
|               |                           |        |                querying with Hive.                |      {name=YARN, modes=[]},      |
|               |                           |        |                                                   |   {name=MapReduce, modes=[]},    |
|               |                           |        |                                                   |      {name=Hive, modes=[]},      |
|               |                           |        |                                                   |      {name=Pig, modes=[]},       |
|               |                           |        |                                                   |     {name=Sqoop, modes=[]},      |
|               |                           |        |                                                   |     {name=Oozie, modes=[]},      |
|               |                           |        |                                                   |     {name=Flume, modes=[]},      |
|               |                           |        |                                                   |   {name=Zookeeper, modes=[]}]    |
|  KAFKA_HDP2_2 |       Kafka HDP 2.2       | HDP2.2 | An individual Kafka stack serving as the backbone | [{name=HDFS, modes=[Secondary]}, |
|               |                           |        |      of a distributed message queuing system.     |     {name=Kafka, modes=[]},      |
|               |                           |        |                                                   |   {name=Zookeeper, modes=[]}]    |
|  SPARK_HDP2_2 |       Spark HDP 2.2       | HDP2.2 | Spark on Yarn supporting both batch and real-time | [{name=HDFS, modes=[Secondary]}, |
|               |                           |        |                    processing.                    |      {name=YARN, modes=[]},      |
|               |                           |        |                                                   |   {name=MapReduce, modes=[]},    |
|               |                           |        |                                                   |      {name=Hive, modes=[]},      |
|               |                           |        |                                                   |      {name=Pig, modes=[]},       |
|               |                           |        |                                                   |   {name=Zookeeper, modes=[]},    |
|               |                           |        |                                                   |     {name=Spark, modes=[]}]      |
+---------------+---------------------------+--------+---------------------------------------------------+----------------------------------+
</programlisting>
                </example> 
                </section> 
            </section>
        <section xml:id="creatingClusters">
            <title>Creating a cluster</title>
            <para>This operation creates a cluster for your account.</para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2">/v2/{tenant_id}/clusters</td>
                        <td colspan="3">Creates a cluster.</td>
                    </tr>
                </tbody>
            </informaltable>
            <section xml:id="curlCreateCluseter">
                <title>cURL example</title>
                <para>The following examples show the cURL request followed by the JSON request body
                    and the corresponding response for creating a cluster. </para>
                <example>
                    <title>cURL create cluster request</title>
                    <programlisting language="bash">curl -i -X POST https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/clusters -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json"</programlisting>
                </example>
                <example>
                    <title>Create cluster request: JSON body</title>
                    <programlisting language="json"><xi:include href="../wadl/samples/lava2/create_cluster_request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Create cluster response: JSON</title>
                    <programlisting language="json"><xi:include href="../wadl/samples/lava2/create_cluster_response.json" parse="text"/></programlisting>
                </example>
            </section>
            <section xml:id="clientCreateCluster">
                <title>Client example</title>
                <para>Using the client, create a cluster as shown in the following example.</para>
                <example>
                    <title>Create a cluster with the CLI </title>
                    <programlisting>$ lava clusters create test KAFKA_HDP2_2 --node-groups='slave(flavor_id=hadoop1-7, count=3)' \
--ssh-key cbdkey --username cbduser
+----------------------------------------------------+
|                      Cluster                       |
+-------------+--------------------------------------+
| ID          | c5444b98-f4b4-aaaa-bbbb-b6e9d3313da1 |
| Name        |                                 test |
| Status      |                             BUILDING |
| Stack       |                         KAFKA_HDP2_2 |
| Created     |            2015-05-30 06:10:37+00:00 |
| CBD Version |                                    2 |
| Username    |                              cbduser |
| Progress    |                                 0.00 |
+-------------+--------------------------------------+

+------------------------------------------------------------+
|                        Node Groups                         |
+-----------+-----------+-------+----------------------------+
|     ID    |   Flavor  | Count |         Components         |
+-----------+-----------+-------+----------------------------+
|   master  | hadoop1-4 |     1 |     [{name=Namenode}]      |
| secondary | hadoop1-4 |     1 | [{name=SecondaryNamenode}] |
|   slave   | hadoop1-7 |     3 |     [{name=Datanode},      |
|           |           |       |    {name=KafkaBroker},     |
|           |           |       |  {name=ZookeeperClient}]   |
| zookeeper | hadoop1-2 |     3 |  [{name=ZookeeperServer},  |
|           |           |       |  {name=ZookeeperClient}]   |
+-----------+-----------+-------+----------------------------+
</programlisting>
                </example>
            </section>
        </section>
            <section xml:id="CDB_listClusters-d1e004">
                <title>Listing clusters</title>
                <para>You use the operation to list clusters to find the available clusters for your
                    account.</para>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/v2/{tenant_id}/clusters</td>
                            <td colspan="3">Lists all clusters for your account.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <section xml:id="curl_listClusters">
                    <title>cURL example</title>
                <para>This operation does not require a request body.</para>
                <para>The following examples show the cURL request and the corresponding response
                    for listing clusters. </para>
                <example>
                    <title>cURL list clusters request: JSON</title>
                    <programlisting language="bash">curl -i -X GET https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/clusters -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json"</programlisting>
                </example>
                
                <example>
                    <title>List clusters response: JSON</title>
                    <programlisting language="json"><xi:include href="../../src/wadl/samples/lava2/list_clusters_response.json" parse="text"/></programlisting>
                </example>
                </section>
                <section xml:id="client_listClusters"><title>Client example</title>
                    <para>Using the client, list clusters as shown in the following example.</para>
                <example>
                    <title>List clusters with the CLI </title>
                    <programlisting>$ lava clusters list
+--------------------------------------+-------------+--------+--------------+---------------------------+
|                  ID                  |     Name    | Status |    Stack     |          Created          |
+--------------------------------------+-------------+--------+--------------+---------------------------+
| c5444b98-f4b4-aaaa-bbbb-b6e9d3313da1 |     test    | ACTIVE | KAFKA_HDP2_2 | 2015-06-30 06:10:37+00:00 |
+--------------------------------------+-------------+--------+--------------+---------------------------+
</programlisting>
                </example> 
                </section>
            </section>
            <section xml:id="CDB_viewDetails">
                <title>Viewing node details</title>
                <para>The operation to get node details lists all server nodes for the specified
                    cluster.</para>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/v2/{tenant_id}/clusters/{clusterId}/nodes</td>
                            <td colspan="3">Lists all nodes for a cluster.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <section xml:id="curl_viewDetails">
                    <title>cURL example</title>
                <para>In the following example, the cluster has a master node and two
                    slave nodes. Each node has a private IP address, which is used for backend
                    (Hadoop) data transfer, and a public IP address, which enables you to access it
                    over the public Internet. In the example, you can remotely SSH
                    into the master or slave nodes over the IP address by using the username and ssh_key
                    that you added during cluster creation.</para>
                <para>The following example show the cURL request and corresponding response for
                    listing all nodes for a cluster.</para>
                <example>
                    <title>cURL list cluster nodes request: JSON</title>
                    <programlisting language="bash">curl -i -X GET https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/clusters/ac111111-2d86-4597-8010-cbe787bbbc41/nodes -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-Type: application/json"</programlisting>
                </example>
                <example>
                    <title>List cluster nodes response: JSON</title>
                    <programlisting language="json"><xi:include href="../../src/wadl/samples/lava2/list_cluster_nodes_response.json" parse="text"/></programlisting>
                </example>
                </section>
                <section xml:id="client_viewDetails"><title>Client example</title>
                <para>Using the client, use the <code>show</code> and <code>nodes</code> commands to
                    query your cluster, as shown in the following example.</para>
                <example>
                    <title>Query the details of a cluster by using the show and nodes commands with
                        the CLI</title>
                    <programlisting>$ lava nodes list cc5444b98-f4b4-aaaa-bbbb-b6e9d3313da1
+--------------------------------------+-------------+-----------+--------+----------------+----------------+--------------------------------+
|                  ID                  |     Name    |    Role   | Status |   Public IP    |   Private IP   |           Components           |
+--------------------------------------+-------------+-----------+--------+----------------+----------------+--------------------------------+
| 057b24f1-6397-4c46-ba59-3649a32db23d |   master-1  |   master  | ACTIVE | 166.78.133.67  | 10.190.241.50  |   [{nice_name=HDFS Namenode,   |
|                                      |             |           |        |                |                | name=Namenode, uri=http://mast |
|                                      |             |           |        |                |                |       er-1.local:50070}]       |
| 42bca320-9581-4321-b835-668216c3e3a9 |   slave-1   |   slave   | ACTIVE | 166.78.132.244 | 10.190.240.242 |   [{nice_name=HDFS Datanode,   |
|                                      |             |           |        |                |                | name=Datanode, uri=http://slav |
|                                      |             |           |        |                |                |       e-1.local:50075},        |
|                                      |             |           |        |                |                |    {nice_name=Kafka Broker,    |
|                                      |             |           |        |                |                |       name=KafkaBroker},       |
|                                      |             |           |        |                |                |  {nice_name=Zookeeper Client,  |
|                                      |             |           |        |                |                |     name=ZookeeperClient}]     |
| 4818bc5c-82e1-4392-800e-0667519b0129 |   slave-2   |   slave   | ACTIVE | 166.78.132.249 | 10.190.240.246 |   [{nice_name=HDFS Datanode,   |
|                                      |             |           |        |                |                | name=Datanode, uri=http://slav |
|                                      |             |           |        |                |                |       e-2.local:50075},        |
|                                      |             |           |        |                |                |    {nice_name=Kafka Broker,    |
|                                      |             |           |        |                |                |       name=KafkaBroker},       |
|                                      |             |           |        |                |                |  {nice_name=Zookeeper Client,  |
|                                      |             |           |        |                |                |     name=ZookeeperClient}]     |
+--------------------------------------+-------------+-----------+--------+----------------+----------------+--------------------------------+
</programlisting>
                </example>
                <para>The example shows that the cluster has the following nodes:</para>
                <itemizedlist>
                    <listitem>
                        <para>One master node</para>
                    </listitem>
                    <listitem>
                        <para>Two slave nodes</para>
                    </listitem>
                </itemizedlist>
                <para>Each server node has the following IP addresses:<itemizedlist>
                        <listitem>
                            <para>A private IP address that is used for backend (Hadoop) data
                                transfers</para>
                        </listitem>
                        <listitem>
                            <para>A public IP address that allows you to access the server over the
                                public Internet</para>
                        </listitem>
                    </itemizedlist></para> 
                </section>
            </section>
            <section xml:id="CBD_resizeClusters">
                <title>Resizing clusters</title>
                <para>You can increase or decrease the size of an existing cluster by using the
                        <code>resize</code> operation.</para>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">/v2/{tenant_id}/clusters/{clusterId}</td>
                            <td colspan="3">Resizes a cluster.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <section xml:id="curl_resizeClusters">
                    <title>cURL example</title>
                <para>The following example resizes the previously created cluster, named
                        <code>test</code>, to include 4 slave nodes. When you use the
                        <code>resize</code> action, you specify the total number of slave nodes that
                    you want the cluster to have, not just the number of nodes to add or remove. In
                    the example, 4 is the total number of slave nodes that the cluster will have after
                    the command is run. After you initiate the <code>resize</code> operation, you can
                    use the operation to list the cluster nodes to confirm that your cluster has
                    been resized.</para>
                <para>The following examples show the cURL request and corresponding response to
                    resize a cluster.</para>
                <example>
                    <title>cURL resize cluster request: JSON</title>
                    <programlisting language="bash">curl -i -X PUT https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/clusters/<emphasis role="bold">yourClusterID</emphasis> -d \
-H "Accept: application/json" \
-H "X-Auth-Token:<emphasis role="bold">yourAuthToken</emphasis>" \
-H "Content-Type: application/json"  
</programlisting>
                </example>
                <example>
                    <title>Resize cluster request: JSON body</title>
                    <programlisting language="json"><xi:include href="../wadl/samples/lava2/resize_cluster_request.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Resize cluster response: JSON</title>
                    <programlisting language="json"><xi:include href="../../src/wadl/samples/lava2/resize_cluster_response.json" parse="text"/></programlisting>
                </example>
                </section>
                <section xml:id="client_resizeClusters"><title>Client example</title>
                <para>Using the client, you can or decrease the size of an existing cluster by using
                    the <code>resize</code> command. The following example resizes a previously
                    created cluster <code>test</code> to include 4 slave nodes.<example>
                        <title>Increase cluster size by using the resize command with the
                            CLI</title>
                        <programlisting>$ lava clusters resize c5444b98-f4b4-aaaa-bbbb-b6e9d3313da1 --node-groups='slave(flavor_id=hadoop1-7, count=4)'
+----------------------------------------------------+
|                      Cluster                       |
+-------------+--------------------------------------+
| ID          | c5444b98-f4b4-aaaa-bbbb-b6e9d3313da1 |
| Name        |                                 test |
| Status      |                             UPDATING |
| Stack       |                         KAFKA_HDP2_2 |
| Created     |            2015-05-30 06:10:37+00:00 |
| CBD Version |                                    2 |
| Username    |                              cbduser |
| Progress    |                                 0.00 |
+-------------+--------------------------------------+

+------------------------------------------------------------+
|                        Node Groups                         |
+-----------+-----------+-------+----------------------------+
|     ID    |   Flavor  | Count |         Components         |
+-----------+-----------+-------+----------------------------+
|   master  | hadoop1-4 |     1 |     [{name=Namenode}]      |
| secondary | hadoop1-4 |     1 | [{name=SecondaryNamenode}] |
|   slave   | hadoop1-7 |     4 |     [{name=Datanode},      |
|           |           |       |    {name=KafkaBroker},     |
|           |           |       |  {name=ZookeeperClient}]   |
| zookeeper | hadoop1-2 |     3 |  [{name=ZookeeperServer},  |
|           |           |       |  {name=ZookeeperClient}]   |
+-----------+-----------+-------+----------------------------+
</programlisting>
                    </example></para>
                <para>When you use the <code>resize</code> command, you specify the total number of
                    nodes per node group that you want the cluster to have, not just the number of nodes to
                    add or remove. In the example, 4 is the total number of slave nodes that the cluster
                    will have after the command is run. After you initiate the <code>resize</code>
                    operation, use the <code>get</code> or <code>list</code> commands to confirm
                    that your cluster has been resized. </para> 
                </section>
            </section>
        <section xml:id="createListScripts">
            <title>Creating a script</title>
            <para>You can create a custom script that runs during various phases of the cluster's
                lifecycle. The script is invoked on all nodes of the cluster. The script type
                currently supported is <code>POST_INIT</code>, which runs after the cluster is
                completely set up. The script must be executable. Preferably, the script should be a
                bash script, but it could be a python script, or a self-contained executable that
                works with the base OS-installed libraries.</para>
            <para>By default there's a few, product-provided scripts that have a <code>is_public</code> flag can be used.
                You do not have the option to edit them.</para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&POST;</td>
                        <td colspan="2">/v2/{tenant_id}/scripts</td>
                        <td colspan="3">Creates a script.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>This operation creates a script.</para>
            <section xml:id="curlCreateScript">
                <title>cURL example</title>
                <para>The following examples show the cURL request and corresponding response for
                    creating a credential.</para>
                <example>
                    <title>cURL create a script </title>
                    <programlisting language="bash">curl -i -X POST https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/script -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json" 
 </programlisting>
                </example>
                <example>
                    <title>Create a script request: JSON body</title>
                    <programlisting language="json"><xi:include href="../wadl/samples/lava2/create_script_request.json" parse="text"/></programlisting>
                </example>
                <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                    <title>Create a script response: JSON</title>
                    <programlisting language="json"><xi:include href="../wadl/samples/lava2/create_script_response.json" parse="text"/>
</programlisting>
                </example>
            </section>
            <section xml:id="clientCreateScript">
                <title>Client example</title>
                <para>Using the client, create a script as shown in the following example. </para>
                <example>
                    <title>Create a script with the CLI </title>
                    <programlisting>$ lava scripts create sample http://example.com/sample.sh post_init
+---------+--------------------------------------+
| ID      | 44f31579-035c-4c63-9ebc-3670fc117506 |
| Name    |                               sample |
| Type    |                            POST_INIT |
| Public  |                                False |
| Created |            2015-06-30 17:03:12+00:00 |
| URL     |         http://example.com/sample.sh |
+---------+--------------------------------------+
</programlisting>
                </example>
            </section>
        </section>
        <section xml:id='listAllScripts'>
            <title>Listing all scripts</title>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"> /v2/{tenant_id}/scripts </td>
                        <td colspan="3">Lists all scripts - global product provided scripts and
                            user-created scripts. </td>
                    </tr>
                </tbody>
            </informaltable>
            <para>This operation lists all scripts. </para>
            <section xml:id="curlListAllScripts">
                <title>cURL example</title>
                <para>This operation does not accept a request body. </para>
                <para>The following examples show the cURL request and corresponding response for
                    listing all scripts.</para>
                <example>
                    <title>cURL list all scripts request</title>
                    <programlisting language="bash">curl -i -X GET https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/scripts -d \
-H "X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>" \
-H "Accept: application/json" \
-H "Content-type: application/json" 
 </programlisting>
                </example>
                <example xmlns:wadl="http://wadl.dev.java.net/2009/02">
                    <title>List all scripts response: JSON</title>
                    <programlisting language="json"><xi:include href="../wadl/samples/lava2/list_scripts_response.json" parse="text"/>
</programlisting>
                </example>
            </section>
            <section xml:id="cleintListAllScripts">
                <title>Client example</title>
                <para>Using the client, list all scripts as shown in the following example. </para>
                <example>
                    <title>List available scripts with the CLI </title>
                    <programlisting>$ lava scripts list
+--------------------------------------+--------+-----------+--------+---------------------------+------------------------------+
|                  ID                  |  Name  |    Type   | Public |          Created          |             URL              |
+--------------------------------------+--------+-----------+--------+---------------------------+------------------------------+
| 44f31579-035c-4c63-9ebc-3670fc117506 | sample | POST_INIT | False  | 2015-06-30 17:03:12+00:00 | http://example.com/sample.sh |
+--------------------------------------+--------+-----------+--------+---------------------------+------------------------------+
</programlisting>
                </example>
            </section>
        </section>
            <section xml:id="CDB_deleteClusters">
                <title>Deleting clusters</title>
                <para>Use the operation to delete clusters to remove unused Hadoop clusters. This
                    operation deletes any servers associated with the cluster and any data stored in
                    the cluster.</para>
                <para>You cannot delete clusters that are in the process of being created or
                    resized.</para>
                <informaltable rules="all">
                    <thead>
                        <tr align="center">
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2">/v2/{tenant_id}/clusters/{id}</td>
                            <td colspan="3">Deletes a cluster.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <section xml:id="curl_deleteClusters">
                    <title>cURL example</title>
                <para>The following examples show the cURL request and corresponding response to
                    delete a cluster.</para>
                <example>
                    <title>cURL delete cluster request: JSON</title>
                    <programlisting language="bash">curl -i -X DELETE https://dfw.bigdata.api.rackspacecloud.com/v2/<emphasis role="bold">yourAccountID</emphasis>/clusters/<emphasis role="bold">yourClusterID</emphasis> -d \
-H "Accept: application/json" \
-H "X-Auth-Token:<emphasis role="bold">yourAuthToken</emphasis>" \
-H "Content-Type: application/json"</programlisting>
                </example>
                <para>This operation does not accept a request body. </para>
                <para>This operation does not return a response body. </para>
                </section>
                <section xml:id="client_deleteClusters"><title>Client example</title>
                    <para>Using the client, use the <code>delete</code> command to remove unused
                    Hadoop clusters as shown in the following example. This command deletes any
                    servers associated with the cluster and any data stored in the cluster.</para>
                    <example>
                        <title>Remove clusters by using the delete command</title>
                        <programlisting>$ lava clusters delete c5444b98-f4b4-aaaa-bbbb-b6e9d3313da1
</programlisting>
                    </example>
                </section> 
            </section>

    </chapter>
    

    
    <chapter xml:id="Additional_Resources">
        <title>Additional resources</title>
        <para>If you have any questions or concerns about using any of the steps in this guide, send
            an email to <email xmlns:wadl="http://wadl.dev.java.net/2009/02"
                >cbdteam@rackspace.com</email>.</para>
        <para>For information about all Cloud Big Data API operations, version 2, see the
                <citetitle>Cloud Big Data Developer Guide, v2</citetitle> at <link
                xlink:href="http://docs.rackspace.com/">http://docs.rackspace.com/</link>. All you
            need to get started with Cloud Big Data is this getting started guide and the developer
            guide. </para>
        <para>For more details about Rackspace &PRODNAME;, go to <link
            xlink:href="http://www.rackspace.com/cloud/big-data/"
            >http://www.rackspace.com/cloud/big-data/</link>.
            This site also offers links to official Rackspace support
            channels, including knowledge center articles, forums,
            phone, chat, and email. </para>
        <para>Visit the <link
            xlink:href="http://feedback.rackspace.com"
                >Product Feedback Forum</link> and tell us what you
            think about &PRODNAME;.</para>
        <para>This API uses standard HTTP 1.1 response codes as
            documented at <link
                xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
                >www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>. </para>
    </chapter>
    
    <chapter xml:id="CBD_Doc_Change_History">
        <title>Document change history</title>            
        <para>This version of the guide replaces and obsoletes all
            earlier versions. The most recent changes are described in
            the following table:</para>
        <?rax revhistory?>
    </chapter>   
    
    <glossary xml:id="glossary_1" xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <title>Glossary</title>
        <glossentry>
            <glossterm>Cluster</glossterm>
            <glossdef>
                <para>A cluster consists of a group of servers  running a distributed system
                    coordinating and functioning as one. A cluster consists of a single stack.
                    Examples are a  Hadoop cluster or a HBase cluster. </para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Component</glossterm>
            <glossdef>
                <para>A service can have one or more components. A component can be a specific
                    configuration for a service or additional modes of operation.  Examples are HDFS
                    Secondary Namenode or HDFS HA.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Credentials</glossterm>
            <glossdef>
                <para>Credentials allow you to setup ssh keys and other connector credentials for
                    use with clusters.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Distro</glossterm>
            <glossdef>
                <para>Distros provide a list of supported distributions and their corresponding
                    versions, as well as a list of supported services and components per
                    distribution.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Flavor</glossterm>
            <glossdef>
                <para>A flavor is an available configuration for Cloud Big Data. Each flavor has a
                    unique combination of memory capacity and priority for CPU time.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="HDFS-d1e020">
            <glossterm>HDFS</glossterm>
            <glossdef>
                <para>The Apache Hadoop Distributed File System. This is the default file system
                    used in &PRODNAME;.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="MapReduce-d1e019">
            <glossterm>MapReduce</glossterm>
            <glossdef>
                <para>A framework for performing calculations on the data in the distributed file
                    system. Map tasks run in parallel with each other. Reduce tasks also run in
                    parallel with each other. </para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="node-d1e018">
            <glossterm>Node</glossterm>
            <glossdef>
                <para>A node is either a virutal or an OnMetal server
                    that serves a particular role in the cluster. A node runs one or more components in the 
                    Hadoop ecosystem.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Resource limits</glossterm>
            <glossdef>
                <para>Resource limits include items such as remaining node count, available RAM, and
                    remaining disk space for the user.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Scripts</glossterm>
            <glossdef>
                <para>You can create a custom script that runs during various phases of the
                    cluster's lifecycle. The script is invoked on all nodes of the cluster. The
                    script type currently supported is <code>POST_INIT</code>, which runs after the
                    cluster is completely set up. The script must be executable. Preferably, the
                    script should be a bash script, but it could be a python script, or a
                    self-contained executable that works with the base OS-installed
                    libraries.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Service</glossterm>
            <glossdef>
                <para>A service is any individual software component that can function on its own or
                    depend on other services to provide added functionality. Examples are  HDFS,
                    Pig, and Hive.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="ServiceCatalog-d1e018">
            <glossterm>Service catalog</glossterm>
            <glossdef>
                <para>Your service catalog is the list of services available to you, as returned
                    along with your authentication token and an expiration date for that token. All
                    the services in your service catalog should recognize your token as valid until
                    it expires.</para>
                <para>The catalog listing for each service provides at least one endpoint URL for
                    that service. Other information, such as regions and versions and tenants, is
                    provided if it is relevant to your access to this service.</para>
            </glossdef>
        </glossentry>
        <glossentry>
            <glossterm>Stack</glossterm>
            <glossdef>
                <para>Stacks are high-level building blocks of software that compose a Big Data
                    architecture. Stacks are comprised of services, which in turn are comprised of
                    components. A stack is specific to a distribution due to the differences in
                    services that are supported across distributions.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="tenant">
            <glossterm>Tenant</glossterm>
            <glossdef>
                <para>A container used to group or isolate resources or identity objects. Depending
                    on the service operator, a tenant could map to a customer, account,
                    organization, or project. </para>
            </glossdef>
        </glossentry>
    </glossary>
</book>
